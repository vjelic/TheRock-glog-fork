{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "515120d7-08ea-3d09-b439-fe022e5c765e",
              "name": "resources.rules.insecure-file-permissions",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-file-permissions"
              },
              "fullDescription": {
                "text": "Insecure file permissions detected (world-writable or world-executable).\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Insecure file permissions detected (world-writable or world-executable).\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Insecure file permissions detected (world-writable or world-executable).\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-file-permissions"
                ]
              }
            },
            {
              "id": "613b1881-b7be-398e-a2c2-49608dd5ce0f",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "5eef40d7-0650-3da8-a820-bf8a8fcad01e",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "c870d312-2689-3c37-a6e4-3ddb842f2a20",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "c0ffb047-a008-348a-8c08-8b315d459629",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "689df749-d8bf-3d04-aff5-5c5b917591cd",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "82bfbdd1-4c8d-3e1a-8f69-6be4054a6269",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "22ca8cae-e6e0-3c6c-ae90-08ac1444c800",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "b1e0baa9-69db-3723-8dcf-9b7c029bb4ac",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "5af4d3e2-2086-3b4f-bbad-3328d1dbb504",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "8185de47-1737-3396-9216-3d3d08591269",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "69a8fc8e-6397-3179-96c8-6e7d50c6da3d",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "9cc7228e-adb1-3eca-a34c-21e67dcf7171",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "9e076613-e312-3ed6-a6b3-3017752f4814",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "b84e0b9f-b29a-3d8e-b5b3-5e1d55504e20",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "06f65342-8bcd-3d50-8cde-94811ba3e9b4",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "ed5b9920-6bfe-3615-99ad-4fa750243693",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "0096e39c-6de1-3832-9587-6d5fd2c69656",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "e9e43cb4-0639-3418-a118-1ec46948054e",
              "name": "resources.rules.tempfile-without-flush",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.tempfile-without-flush"
              },
              "fullDescription": {
                "text": "Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.tempfile-without-flush"
                ]
              }
            },
            {
              "id": "e7678f25-0dc0-3404-8c18-bdb404f94111",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "2d116d37-15d6-3b13-933a-af51bb1e71b7",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "d5ca6982-ef17-37eb-8153-1cb169b140b5",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "4ca50a92-8e74-3fb8-ac1a-71a2371efeee",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "7a7a2d23-a775-371c-99ae-8402aa957244",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "daf28ab1-1c16-39e2-9310-42f23ee3c364",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "49603af6-e488-30e1-ab93-96fe74b63516",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "7285e23b-b28a-3422-9a51-d1fd7628d96f",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "95f71019-704d-39e1-9887-42030aaf6eab",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "d991de88-2fb4-3eaa-83c1-c36a939ed3fc",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "269bf104-4e93-32f5-a63b-31defcf9ec99",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "c5eaf748-a952-398c-b043-7000d64c67c4",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "d3b72b12-9bca-33c3-b8fa-028c292f4a3f",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "93c626cc-5035-33bc-8ab5-97b095312dae",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "bc0a995c-380e-3984-af82-7c74ecde0ee3",
              "name": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1"
              },
              "fullDescription": {
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
              "help": {
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1)\n - [https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html](https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)\n - [https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability)\n - [http://2012.sharcs.org/slides/stevens.pdf](http://2012.sharcs.org/slides/stevens.pdf)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1"
                ]
              }
            },
            {
              "id": "df3a601f-8073-3376-8c8f-eaa70be6f39a",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "8979fb55-d7db-331b-812e-ac0444530e3e",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "2c14a099-d669-34a3-80f6-7c7882fcee0a",
              "name": "python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected"
              },
              "fullDescription": {
                "text": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected",
              "help": {
                "text": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected)\n - [https://cwe.mitre.org/data/definitions/939.html](https://cwe.mitre.org/data/definitions/939.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected"
                ]
              }
            },
            {
              "id": "845c927f-e94f-3bc1-a57e-61b154421c41",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "98739e5a-194a-3d2c-a36c-3597d3e40531",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "9b37de60-b26f-3dae-acd5-fcf82528f1f9",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "008ca5a9-5c3e-33e9-aab7-7fd044dfceb1",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "7cc42dab-feeb-3250-bb0d-02bfcbfab1a6",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "9b15a6c3-88e0-3de6-925f-3ad04ae997dc",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "b5c7ffe3-7e7a-393d-bfd6-b48afa09092d",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "f73402c9-aa81-3f65-9f72-731264937b72",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "a60d54b1-b14d-3340-a4e6-19496619667d",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "b0b6ddca-096a-31ae-94d4-7a0954896760",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "d81b132d-6a82-363a-81d8-657326819922",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "957f9c7d-1fea-376d-9c64-86e836e953b7",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "260f0cda-3a3b-35b9-b032-16715b1c8be3",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "f8705877-18b8-3e16-9fe1-00650a5524dd",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "ceab09b9-0caa-3166-9c9a-5c8b503ef6d8",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "a86bb752-dfe2-3c67-9f36-78eee9ab0b41",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "f0280792-f148-3c7f-aeb4-a02bdd7b6b37",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "5623cc07-0bce-3bfb-96d0-8753fff28020",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "86bdfa92-fa1c-33c3-857f-07794fceabf9",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "1739ec02-1de6-3586-9ff3-2846d9c483a5",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "399436a0-75a1-3178-95b5-7034028a5459",
              "name": "resources.rules.raise-not-base-exception",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raise-not-base-exception"
              },
              "fullDescription": {
                "text": "In Python3, a runtime `TypeError` will be thrown if you attempt to raise an object or class which does not inherit from `BaseException`"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "In Python3, a runtime `TypeError` will be thrown if you attempt to raise an object or class which does not inherit from `BaseException`\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "In Python3, a runtime `TypeError` will be thrown if you attempt to raise an object or class which does not inherit from `BaseException`\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raise-not-base-exception"
                ]
              }
            },
            {
              "id": "2b6ae9af-71b8-3e99-9ef4-139c4aaf07cd",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "89f2489c-c5d1-36c6-8870-356a6eb73057",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "1dde94d0-6578-314a-b874-257f2e5a6a57",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "c4c399be-7433-3ef4-9072-7ee8d9ceaebd",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "1e178bfb-d243-3af0-945d-4b856d74e5e4",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "0c51dc60-01da-3447-bd88-4928066a5577",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "eae8e175-4b11-3a19-b118-659c2d3d97aa",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "681ca36c-02b9-3310-8011-f7867b8b2e0a",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "dd398a0d-f5f1-33ef-8248-0d4e381cba55",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "eac51637-8c5d-3879-b57d-cf390a3a05a2",
              "name": "resources.rules.insecure-tarfile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-tarfile-use"
              },
              "fullDescription": {
                "text": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-tarfile-use"
                ]
              }
            },
            {
              "id": "1f214241-8719-30d0-954b-7c8bb13c2dfd",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "e930aa21-0dbf-3770-b061-cda2b08406fe",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "be27822f-773a-341a-9a7c-a77ff764bc8e",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "a9124860-7a32-3260-b075-d3309cb26ff6",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "3a3ad12f-fa5e-3706-a62e-aaba98273e85",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "47983d6d-0677-31e3-aa42-d760e708db9a",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "896627e5-a38a-3ff2-b755-5b3a60ea0b84",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "34c751bf-ae90-37bc-b48d-2fb456a7a6cf",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "8e67f652-4c16-3d74-9428-96dc1b66d008",
              "name": "resources.rules.dangerous-spawn-process",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-spawn-process"
              },
              "fullDescription": {
                "text": "Found dynamic content when spawning a process. This is dangerous if external\ndata can reach this function call because it allows a malicious actor to\nexecute commands. Ensure no external data reaches here.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Found dynamic content when spawning a process. This is dangerous if external\ndata can reach this function call because it allows a malicious actor to\nexecute commands. Ensure no external data reaches here.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found dynamic content when spawning a process. This is dangerous if external\ndata can reach this function call because it allows a malicious actor to\nexecute commands. Ensure no external data reaches here.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-spawn-process"
                ]
              }
            },
            {
              "id": "74b01d64-2859-3653-a94c-282a5d955dbf",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "a150bc0b-1a2f-3753-89ae-f159ad74482d",
              "name": "resources.rules.dangerous-spawn-process",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-spawn-process"
              },
              "fullDescription": {
                "text": "Found dynamic content when spawning a process. This is dangerous if external\ndata can reach this function call because it allows a malicious actor to\nexecute commands. Ensure no external data reaches here.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Found dynamic content when spawning a process. This is dangerous if external\ndata can reach this function call because it allows a malicious actor to\nexecute commands. Ensure no external data reaches here.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found dynamic content when spawning a process. This is dangerous if external\ndata can reach this function call because it allows a malicious actor to\nexecute commands. Ensure no external data reaches here.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-spawn-process"
                ]
              }
            },
            {
              "id": "3711bec2-affc-3867-a872-0e55f6c0b09d",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "60774b38-3eeb-3886-a631-dc5ce7a55516",
              "name": "resources.rules.dangerous-spawn-process",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-spawn-process"
              },
              "fullDescription": {
                "text": "Found dynamic content when spawning a process. This is dangerous if external\ndata can reach this function call because it allows a malicious actor to\nexecute commands. Ensure no external data reaches here.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Found dynamic content when spawning a process. This is dangerous if external\ndata can reach this function call because it allows a malicious actor to\nexecute commands. Ensure no external data reaches here.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found dynamic content when spawning a process. This is dangerous if external\ndata can reach this function call because it allows a malicious actor to\nexecute commands. Ensure no external data reaches here.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-spawn-process"
                ]
              }
            },
            {
              "id": "e6b562c4-5ada-326d-8a5d-8de336fa4272",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "57c7cc3e-9f68-3288-bce3-42e7c7b11986",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "d25a2723-088e-3541-8560-3f8417ee0037",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "571926c3-e4e3-33b4-ab23-0eae443923a1",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "8608088c-22c1-30bb-a229-082615bf4779",
              "name": "resources.rules.insecure-tarfile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-tarfile-use"
              },
              "fullDescription": {
                "text": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-tarfile-use"
                ]
              }
            },
            {
              "id": "4d57df0e-0461-322f-8c4d-64903fc3b647",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "1738d01b-6d71-3f4d-aa63-df91ea728432",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "1a751035-5897-35fb-8d8e-a1badce95690",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "13383246-33d6-3760-a196-6d60f0e80130",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "87f851f1-8c48-39b9-8941-61f39842fa30",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "5fd8dfd2-908d-37fb-8b83-9b74be082221",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "ad6cad85-6290-33dd-8249-407f9f4ffa8a",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "cb343c52-f170-34d5-9d14-01822ed2f3b8",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "251c9c06-a88a-3e09-a1e4-e837ca6b6440",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "2621ccff-ff97-3db4-b499-2b44b3dd4582",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "ef72b14d-3c60-38c1-a716-7e83df198d48",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "627781a0-f0f6-3ef5-8277-f9804f218334",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "e2391726-cab7-3f99-905b-4c64dea4207f",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "db09189b-7e27-3a0c-9c29-7b58d49e353b",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "af385e57-8e87-3c49-8365-6c68728232ed",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "f73595ef-af5e-34b7-9bf3-d23a582ce06f",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "dbc50612-4881-3339-ac3c-ddcf367cecc3",
              "name": "resources.rules.missing-image-version",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-image-version"
              },
              "fullDescription": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Images should be tagged with an explicit version to produce deterministic container images.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3006](https://github.com/hadolint/hadolint/wiki/DL3006)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-image-version"
                ]
              }
            },
            {
              "id": "98ee7643-5162-3971-909d-8054cfba2a7b",
              "name": "resources.rules.open-never-closed",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.open-never-closed"
              },
              "fullDescription": {
                "text": "file object opened without corresponding close"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "file object opened without corresponding close\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "file object opened without corresponding close\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.open-never-closed"
                ]
              }
            },
            {
              "id": "77ad3af2-8fe0-3b5c-89d1-f73387c5b0c3",
              "name": "resources.rules.missing-pip-no-cache-dir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-pip-no-cache-dir"
              },
              "fullDescription": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3042](https://github.com/hadolint/hadolint/wiki/DL3042)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-pip-no-cache-dir"
                ]
              }
            },
            {
              "id": "555c44ea-0cb8-3200-8e2f-f0ce6b8f344b",
              "name": "resources.rules.missing-yum-clean-all",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-yum-clean-all"
              },
              "fullDescription": {
                "text": "This yum command does not end with '&& yum clean all'. Running 'yum clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "This yum command does not end with '&& yum clean all'. Running 'yum clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This yum command does not end with '&& yum clean all'. Running 'yum clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3032](https://github.com/hadolint/hadolint/wiki/DL3032)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-yum-clean-all"
                ]
              }
            },
            {
              "id": "38fda9a0-5117-3eb9-83c2-b26cf75477b7",
              "name": "resources.rules.missing-yum-clean-all",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-yum-clean-all"
              },
              "fullDescription": {
                "text": "This yum command does not end with '&& yum clean all'. Running 'yum clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "This yum command does not end with '&& yum clean all'. Running 'yum clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This yum command does not end with '&& yum clean all'. Running 'yum clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3032](https://github.com/hadolint/hadolint/wiki/DL3032)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-yum-clean-all"
                ]
              }
            },
            {
              "id": "e1421f36-ce22-3c55-b685-3881545904c5",
              "name": "resources.rules.missing-yum-clean-all",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-yum-clean-all"
              },
              "fullDescription": {
                "text": "This yum command does not end with '&& yum clean all'. Running 'yum clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "This yum command does not end with '&& yum clean all'. Running 'yum clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This yum command does not end with '&& yum clean all'. Running 'yum clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3032](https://github.com/hadolint/hadolint/wiki/DL3032)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-yum-clean-all"
                ]
              }
            },
            {
              "id": "745c88e5-5de7-3aa0-8f56-2a864339f087",
              "name": "resources.rules.missing-yum-clean-all",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-yum-clean-all"
              },
              "fullDescription": {
                "text": "This yum command does not end with '&& yum clean all'. Running 'yum clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "This yum command does not end with '&& yum clean all'. Running 'yum clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This yum command does not end with '&& yum clean all'. Running 'yum clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3032](https://github.com/hadolint/hadolint/wiki/DL3032)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-yum-clean-all"
                ]
              }
            },
            {
              "id": "53644bf7-7665-39ff-8bd5-69c5ba405d1d",
              "name": "resources.rules.set-pipefail",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.set-pipefail"
              },
              "fullDescription": {
                "text": "Only the exit code from the final command in this RUN instruction will be evaluated unless 'pipefail' is set.\nIf you want to fail the command at any stage in the pipe, set 'pipefail' by including 'SHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"] before the command.\nIf you're using alpine and don't have bash installed, communicate this explicitly with `SHELL [\"/bin/ash\"]`.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Only the exit code from the final command in this RUN instruction will be evaluated unless 'pipefail' is set.\nIf you want to fail the command at any stage in the pipe, set 'pipefail' by including 'SHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"] before the command.\nIf you're using alpine and don't have bash installed, communicate this explicitly with `SHELL [\"/bin/ash\"]`.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Only the exit code from the final command in this RUN instruction will be evaluated unless 'pipefail' is set.\nIf you want to fail the command at any stage in the pipe, set 'pipefail' by including 'SHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"] before the command.\nIf you're using alpine and don't have bash installed, communicate this explicitly with `SHELL [\"/bin/ash\"]`.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL4006](https://github.com/hadolint/hadolint/wiki/DL4006)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.set-pipefail"
                ]
              }
            },
            {
              "id": "a4625652-8d19-315c-a1a8-5601a0e470b5",
              "name": "resources.rules.prefer-apt-get",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.prefer-apt-get"
              },
              "fullDescription": {
                "text": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3027](https://github.com/hadolint/hadolint/wiki/DL3027)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.prefer-apt-get"
                ]
              }
            },
            {
              "id": "90f2c7fc-94af-3d68-a0b5-9442be0cb4d7",
              "name": "dockerfile.security.no-sudo-in-dockerfile.no-sudo-in-dockerfile",
              "shortDescription": {
                "text": "Opengrep Finding: dockerfile.security.no-sudo-in-dockerfile.no-sudo-in-dockerfile"
              },
              "fullDescription": {
                "text": "Avoid using sudo in Dockerfiles. Running processes as a non-root user can help  reduce the potential impact of configuration errors and security vulnerabilities."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/dockerfile.security.no-sudo-in-dockerfile.no-sudo-in-dockerfile",
              "help": {
                "text": "Avoid using sudo in Dockerfiles. Running processes as a non-root user can help  reduce the potential impact of configuration errors and security vulnerabilities.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using sudo in Dockerfiles. Running processes as a non-root user can help  reduce the potential impact of configuration errors and security vulnerabilities.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/dockerfile.security.no-sudo-in-dockerfile.no-sudo-in-dockerfile)\n - [https://cwe.mitre.org/data/definitions/250.html](https://cwe.mitre.org/data/definitions/250.html)\n - [https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#user](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#user)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "dockerfile.security.no-sudo-in-dockerfile.no-sudo-in-dockerfile"
                ]
              }
            },
            {
              "id": "6f15a8b5-49d0-3908-a970-135f094ee31c",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "2ae2b73e-8ac6-3203-83d4-ab438e6c6371",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "f987d267-332d-3626-a4c3-5c89855aae55",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "8b982c71-b4b2-3945-a2ae-768d6df8bca3",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "48bed010-638e-3cb6-b7d1-d8cc57e3fca0",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "c3052a27-e086-33de-972c-4e2138fc850e",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "7a908f45-e2ce-3841-8abe-732f973f316f",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "a8e0210d-db49-349e-ad7c-cfa0b9717deb",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "6ef17ed1-f5a8-3ff6-9f99-ff3a9167260f",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "2ef656ea-1a94-399b-9087-68526ae047ce",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "206c3841-756b-3873-8bc3-7ee9046a1ff4",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "4c72401a-dc51-36d8-8520-a97974169b5d",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "19bf931e-c93e-305e-a317-2a26e3d1ba42",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "2feb4cc5-66e8-331c-872d-c517bcdbfbd1",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "e0188279-5400-35a1-831e-8e364febea4a",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "ad0f7f70-9b49-3baa-8f1b-99b58d241ae9",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "e55630b7-cdf5-3220-8ea6-2cce7ad84c78",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "e09e4b19-fa58-33f0-b38c-058572112e64",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "881d1438-a4da-34bb-955a-724ecd56b15f",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "79bac9de-d8fc-3ef2-8950-4a89ce9691e5",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "3020b41c-2002-3e56-b9fa-4f9c978dc493",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "c44f754b-2d5b-31e1-ba81-134c9bbacdf9",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "661a1ad3-f192-363e-ae8e-c827cdd1515f",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "64a74bcf-54e7-329f-8647-d59ed31bb898",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "67ce4e0d-1b5a-326d-9a15-3d30e8cdaff6",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "9e5d9dff-92f7-35a1-8e58-db5d902160bc",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "030a4d97-2a7c-36b9-836f-1d924fdd2fa5",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "8d21ce05-e891-310f-af59-4232b80ca70e",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "9d85b6fc-3c92-384d-8020-2f89d6e39c75",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "52525e89-8324-3608-94ff-fd918597bbca",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "01a9a380-998b-3af6-b073-d534df0d80ab",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "27df5807-5174-3f40-b70e-427e3c5491a7",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "b35f4991-5f68-315c-b42f-f2e3f1453141",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "2dfd5922-2c1c-3b26-8c75-8a1307aa25db",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "4ff967ef-e3f1-31f9-bd2f-f60009f5e0ff",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "c273a7d0-6c10-301b-a29f-ff79ef098d4d",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "f147fe97-4313-345d-b370-d5bef2687c27",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "72a9d4e5-f302-3148-96d3-2768db2b10e0",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "8ecb3cb7-5541-3be8-963b-c513e741b219",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "e22a269e-55aa-3868-8ed1-2cebe97e28be",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "4fb70e11-e481-3a2a-91a0-b54bd41a2e64",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "cc26142e-4d1c-33ef-8976-4913d8335960",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "decd9af5-96d4-3679-8203-c10a3632407d",
              "name": "resources.rules.open-never-closed",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.open-never-closed"
              },
              "fullDescription": {
                "text": "file object opened without corresponding close"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "file object opened without corresponding close\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "file object opened without corresponding close\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.open-never-closed"
                ]
              }
            },
            {
              "id": "934dc4a9-00d0-35a5-9870-56f21d81be5b",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "515120d7-08ea-3d09-b439-fe022e5c765e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure file permissions detected (world-writable or world-executable).\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/_therock_utils/artifacts.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 78,
                  "endLine": 226,
                  "endColumn": 86,
                  "snippet": {
                    "text": "                                                os.fchmod(out_file.fileno(), new_mode)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ce85c457b6d3faf30e38be3a48cc2933e257db4196286cbf06b652a0927600b289783c20c1ca99d8611f59aabd6c992a2c7e3e0d51a284a1e45ec8ab8d707795_0"
          },
          "properties": {}
        },
        {
          "ruleId": "613b1881-b7be-398e-a2c2-49608dd5ce0f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"^([^_]+)_([^_]+)_([^_]+)$\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/_therock_utils/artifacts.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 17,
                  "endLine": 42,
                  "endColumn": 65,
                  "snippet": {
                    "text": "            m = re.match(r\"^([^_]+)_([^_]+)_([^_]+)$\", filename)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "74ffb8529f06d40159186fd852e6663bbbe80969cd13d00c977439dfb0da4d36ec480dd18af02b5fb4ef52273d6216f065451275b87274b4ce39fdb5b555eb63_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5eef40d7-0650-3da8-a820-bf8a8fcad01e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_call' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/_therock_utils/exe_stub_gen.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 9,
                  "endLine": 86,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        subprocess.check_call(\n            [cc, \"-fPIE\", \"-o\", str(output_file), str(source_file), \"-ldl\"]\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f21fa76be3b051d7a1eddab7cb4bb2d9eb8269cb3e9010af2b306af1ca5cdc6ca8f98556480da5b2d0624ea572b93fb9ae337528f448c3f8f44e270a90099122_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c870d312-2689-3c37-a6e4-3ddb842f2a20",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"^([^_]+)_([^_]+)_([^_]+)\\.tar.xz$\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/_therock_utils/artifacts.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 13,
                  "endLine": 52,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        m = re.match(r\"^([^_]+)_([^_]+)_([^_]+)\\.tar.xz$\", filename)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "91b3ba5d9c798e38bab250a8605d0af71c42adfd1c166f59a1611b675c3681fe66cf1aa6600acb48c496a061420a15b0567cf6f6a61158cab4db5ef43c9301dc_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c0ffb047-a008-348a-8c08-8b315d459629",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `pattern` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/_therock_utils/pattern_match.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 24,
                  "endLine": 24,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        self.pattern = re.compile(pattern)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8106cda5124a1f5bb14b24c10daf218f3c9cb7203dd1b2c6199fcce7fe81c54e86c81871a4a703b2474877591b382a6f06e5043cb84d52a78bd5c5b8cabb6988_0"
          },
          "properties": {}
        },
        {
          "ruleId": "689df749-d8bf-3d04-aff5-5c5b917591cd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_call' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/_therock_utils/py_packaging.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 13,
                  "endLine": 350,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            subprocess.check_call(patchelf_cl)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b2e9b9ce827c5826ee5fc5efabbde8fc16219a9bd02879cb6862fff8ab6ea980dd0f3d9700e20fc971043327f9f93c2324fb6fb7a355ea7c48008c8b1a342f7e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "82bfbdd1-4c8d-3e1a-8f69-6be4054a6269",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"ar archive\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/_therock_utils/py_packaging.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 506,
                  "startColumn": 18,
                  "endLine": 506,
                  "endColumn": 42,
                  "snippet": {
                    "text": "MAGIC_AR_MATCH = re.compile(\"ar archive\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3e6cd7c787155b9c4132c4476675dd5aec58d509799f3536348963b1a1fd2617a5ccf020ee07b9a8a569e774dca3ce5de2e7d601b3e861c0162ef3825e0c5784_0"
          },
          "properties": {}
        },
        {
          "ruleId": "22ca8cae-e6e0-3c6c-ae90-08ac1444c800",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/_therock_utils/py_packaging.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 9,
                  "endLine": 101,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        exec(self.dist_info_contents, self.dist_info.__dict__)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "20147e9269caf97b5da6fb94fcc6150dc3fd6bc9d8acb8d9551a20baabc4567d04be09ae1fe6a79f6e9f8f02c4f5d7c25922ffdd272572e79ae8eb7451c59dfe_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b1e0baa9-69db-3723-8dcf-9b7c029bb4ac",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"ELF[^,]+executable,\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/_therock_utils/py_packaging.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 507,
                  "startColumn": 26,
                  "endLine": 507,
                  "endColumn": 59,
                  "snippet": {
                    "text": "MAGIC_EXECUTABLE_MATCH = re.compile(\"ELF[^,]+executable,\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b572afe8a86d84ebbb9a320aa72b6c65c9c7dba28a8c5e30ce90cbda0719fc520abfb995ce16596ca83175092517051b0125e9071935cba725adae97c873375d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5af4d3e2-2086-3b4f-bbad-3328d1dbb504",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"ELF[^,]+shared object,\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/_therock_utils/py_packaging.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 508,
                  "startColumn": 18,
                  "endLine": 508,
                  "endColumn": 54,
                  "snippet": {
                    "text": "MAGIC_SO_MATCH = re.compile(\"ELF[^,]+shared object,\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fd08ca3a4b7cfe0461cfaeeb7b2cbf3b747c147fd8ec38d0dfcfe760bbc0ea8da8eed854dae54743b13ddc82aa9f5df60d86c2503cca63a564e466b4eccdb62e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8185de47-1737-3396-9216-3d3d08591269",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_call' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/_therock_utils/py_packaging.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 594,
                  "startColumn": 9,
                  "endLine": 594,
                  "endColumn": 84,
                  "snippet": {
                    "text": "        subprocess.check_call(build_args, cwd=child_path, stderr=subprocess.STDOUT)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b2e9b9ce827c5826ee5fc5efabbde8fc16219a9bd02879cb6862fff8ab6ea980dd0f3d9700e20fc971043327f9f93c2324fb6fb7a355ea7c48008c8b1a342f7e_1"
          },
          "properties": {}
        },
        {
          "ruleId": "69a8fc8e-6397-3179-96c8-6e7d50c6da3d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_call' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/bump_submodules.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 5,
                  "endLine": 43,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    subprocess.check_call(args, cwd=str(cwd), stdin=subprocess.DEVNULL)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "daa69f965299286ad2658c1befd01ba9429566f8d2d0719a0f73d483fd370862f9fe4d604f97982273d5ee61c0ed701a85ee511d41e480fac8ae03b188254bef_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9cc7228e-adb1-3eca-a34c-21e67dcf7171",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/bump_submodules.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 9,
                  "endLine": 148,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        exec(\n            [\"git\", \"checkout\", \"-b\", args.branch_name],\n            cwd=THEROCK_DIR,\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "462f4420f28ac289329f5ac739f0b6681ad4d9a67ab92f213fee18c7331c40bd83a83065ab2362a1b7d08fff10889eb8bac0e70d9146d94b4f326eea49bd2cf5_1"
          },
          "properties": {}
        },
        {
          "ruleId": "9e076613-e312-3ed6-a6b3-3017752f4814",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/bump_submodules.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 5,
                  "endLine": 64,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    exec(\n        [\"git\", \"checkout\", ck_commit],\n        cwd=THEROCK_DIR / \"ml-libs\" / \"composable_kernel\",\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "462f4420f28ac289329f5ac739f0b6681ad4d9a67ab92f213fee18c7331c40bd83a83065ab2362a1b7d08fff10889eb8bac0e70d9146d94b4f326eea49bd2cf5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b84e0b9f-b29a-3d8e-b5b3-5e1d55504e20",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/bump_submodules.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 5,
                  "endLine": 165,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    exec(\n        [\n            sys.executable,\n            \"./build_tools/fetch_sources.py\",\n            \"--remote\",\n            \"--no-apply-patches\",\n        ]\n        + fetch_args\n        + projects_args,\n        cwd=THEROCK_DIR,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "462f4420f28ac289329f5ac739f0b6681ad4d9a67ab92f213fee18c7331c40bd83a83065ab2362a1b7d08fff10889eb8bac0e70d9146d94b4f326eea49bd2cf5_2"
          },
          "properties": {}
        },
        {
          "ruleId": "06f65342-8bcd-3d50-8cde-94811ba3e9b4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/bump_submodules.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 5,
                  "endLine": 173,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    exec(\n        [\"git\", \"commit\", \"-a\", \"-m\", \"Bump submodules \" + date],\n        cwd=THEROCK_DIR,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "462f4420f28ac289329f5ac739f0b6681ad4d9a67ab92f213fee18c7331c40bd83a83065ab2362a1b7d08fff10889eb8bac0e70d9146d94b4f326eea49bd2cf5_3"
          },
          "properties": {}
        },
        {
          "ruleId": "ed5b9920-6bfe-3615-99ad-4fa750243693",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/bump_submodules.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 9,
                  "endLine": 188,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        exec(\n            [\"git\", \"push\", \"-u\", \"origin\", args.branch_name],\n            cwd=THEROCK_DIR,\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "462f4420f28ac289329f5ac739f0b6681ad4d9a67ab92f213fee18c7331c40bd83a83065ab2362a1b7d08fff10889eb8bac0e70d9146d94b4f326eea49bd2cf5_5"
          },
          "properties": {}
        },
        {
          "ruleId": "0096e39c-6de1-3832-9587-6d5fd2c69656",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/bump_submodules.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 9,
                  "endLine": 179,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        exec(\n            [sys.executable, \"./build_tools/fetch_sources.py\"],\n            cwd=THEROCK_DIR,\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "462f4420f28ac289329f5ac739f0b6681ad4d9a67ab92f213fee18c7331c40bd83a83065ab2362a1b7d08fff10889eb8bac0e70d9146d94b4f326eea49bd2cf5_4"
          },
          "properties": {}
        },
        {
          "ruleId": "e9e43cb4-0639-3418-a118-1ec46948054e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Using 'tf.name' without '.flush()' or '.close()' may cause an error because the file may not exist when 'tf.name' is used. Use '.flush()' or close the file before using 'tf.name'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/export_source_archive.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 35,
                  "endLine": 112,
                  "endColumn": 42,
                  "snippet": {
                    "text": "            self.archive.add(Path(tf.name), arcname)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "29b82c5f79b878df1adda30c3fb291f67509317ecd46d3a4131245fbf139a85a56522b90d0d4f90b5fd405dadab0387b0d9932880cda8a8cfbac102b04415f92_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e7678f25-0dc0-3404-8c18-bdb404f94111",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_output' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/export_source_archive.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 13,
                  "endLine": 120,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    lines = subprocess.check_output(cl).decode()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "62bfaa0e8e4631cefbb50bbfdb3461b99eeb60cd23f93c9e0102022771059ae6acd0798684048e95d97c5756e58a1432681134d80eff20e199d5eda1c893034b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2d116d37-15d6-3b13-933a-af51bb1e71b7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_output' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/export_source_archive.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 12,
                  "endLine": 126,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    return subprocess.check_output(cl).decode().strip()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "62bfaa0e8e4631cefbb50bbfdb3461b99eeb60cd23f93c9e0102022771059ae6acd0798684048e95d97c5756e58a1432681134d80eff20e199d5eda1c893034b_1"
          },
          "properties": {}
        },
        {
          "ruleId": "d5ca6982-ef17-37eb-8153-1cb169b140b5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_call' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/fetch_repo.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 5,
                  "endLine": 25,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    subprocess.check_call(args, cwd=str(cwd), stdin=subprocess.DEVNULL)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "db93bf3c7b20a69fec1a4ead49e04488c59c4fe33a05bb07de8c34d7ab54bcdf7feedf0aa6bbd1ccb4dcfe2494b14cfa7a585124ac97e83ddfe7f716f87bd419_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4ca50a92-8e74-3fb8-ac1a-71a2371efeee",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_output' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/export_source_archive.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 16,
                  "endLine": 132,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        return subprocess.check_output(cl).decode().strip()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "62bfaa0e8e4631cefbb50bbfdb3461b99eeb60cd23f93c9e0102022771059ae6acd0798684048e95d97c5756e58a1432681134d80eff20e199d5eda1c893034b_2"
          },
          "properties": {}
        },
        {
          "ruleId": "7a7a2d23-a775-371c-99ae-8402aa957244",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/fetch_repo.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 5,
                  "endLine": 32,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    exec(\n        [\"git\", \"checkout\", args.remote_branch],\n        cwd=args.directory,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "54cebcbb7a3b856da425a53222a17c38d0b8bf7e10a9e7c498e499435e52a5d48176e835564612251a76d0b37bdfa456558f63950e43e38150f44a4aa5c4e8e9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "daf28ab1-1c16-39e2-9310-42f23ee3c364",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/fetch_repo.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 5,
                  "endLine": 42,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    exec(\n        [\"git\", \"checkout\"] + additional_args + [args.commit],\n        cwd=args.directory,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "54cebcbb7a3b856da425a53222a17c38d0b8bf7e10a9e7c498e499435e52a5d48176e835564612251a76d0b37bdfa456558f63950e43e38150f44a4aa5c4e8e9_1"
          },
          "properties": {}
        },
        {
          "ruleId": "49603af6-e488-30e1-ab93-96fe74b63516",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/fetch_repo.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 5,
                  "endLine": 54,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    exec(\n        [\"git\", \"fetch\", \"origin\", f\"pull/{args.pr_number}/head:{local_branch}\"],\n        cwd=args.directory,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "54cebcbb7a3b856da425a53222a17c38d0b8bf7e10a9e7c498e499435e52a5d48176e835564612251a76d0b37bdfa456558f63950e43e38150f44a4aa5c4e8e9_2"
          },
          "properties": {}
        },
        {
          "ruleId": "7285e23b-b28a-3422-9a51-d1fd7628d96f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/fetch_repo.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 5,
                  "endLine": 58,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    exec(\n        [\"git\", \"switch\", local_branch],\n        cwd=args.directory,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "54cebcbb7a3b856da425a53222a17c38d0b8bf7e10a9e7c498e499435e52a5d48176e835564612251a76d0b37bdfa456558f63950e43e38150f44a4aa5c4e8e9_3"
          },
          "properties": {}
        },
        {
          "ruleId": "95f71019-704d-39e1-9887-42030aaf6eab",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/fetch_repo.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 5,
                  "endLine": 71,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    exec(\n        [\"git\", \"clone\"] + additional_args + [args.repo, args.directory],\n        cwd=THIS_SCRIPT_DIR,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "54cebcbb7a3b856da425a53222a17c38d0b8bf7e10a9e7c498e499435e52a5d48176e835564612251a76d0b37bdfa456558f63950e43e38150f44a4aa5c4e8e9_4"
          },
          "properties": {}
        },
        {
          "ruleId": "d991de88-2fb4-3eaa-83c1-c36a939ed3fc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_call' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/fetch_sources.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 5,
                  "endLine": 32,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    subprocess.check_call(args, cwd=str(cwd), stdin=subprocess.DEVNULL)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d57739f1e8bb298a2e3128b7ee450c4ead6adfced65e8d9700742ce59efe5f8e5e2817a6086906f1d14eb704f6c4357023ec4d4b25a1f242c017c4923c51e3bf_0"
          },
          "properties": {}
        },
        {
          "ruleId": "269bf104-4e93-32f5-a63b-31defcf9ec99",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/fetch_sources.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 9,
                  "endLine": 68,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        exec(\n            [\"git\", \"submodule\", \"update\", \"--init\"]\n            + update_args\n            + [\"--\"]\n            + submodule_paths,\n            cwd=THEROCK_DIR,\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d44fc85daa19e136aa67a7353331f3eaf30c95a4fecc86fc584b376f42d0ac54c721dea52b860dcbf36b4374e78518cc3de37e7d65d2e2b116c9bb5f8dca2d40_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c5eaf748-a952-398c-b043-7000d64c67c4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/fetch_sources.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 5,
                  "endLine": 78,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    exec(\n        [\"git\", \"update-index\", \"--no-skip-worktree\", \"--\"] + submodule_paths,\n        cwd=THEROCK_DIR,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d44fc85daa19e136aa67a7353331f3eaf30c95a4fecc86fc584b376f42d0ac54c721dea52b860dcbf36b4374e78518cc3de37e7d65d2e2b116c9bb5f8dca2d40_1"
          },
          "properties": {}
        },
        {
          "ruleId": "d3b72b12-9bca-33c3-b8fa-028c292f4a3f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/fetch_sources.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 9,
                  "endLine": 137,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        exec(\n            [\n                \"git\",\n                \"-c\",\n                \"user.name=therockbot\",\n                \"-c\",\n                \"user.email=therockbot@amd.com\",\n                \"am\",\n                \"--whitespace=nowarn\",\n            ]\n            + patch_files,\n            cwd=project_dir,\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d44fc85daa19e136aa67a7353331f3eaf30c95a4fecc86fc584b376f42d0ac54c721dea52b860dcbf36b4374e78518cc3de37e7d65d2e2b116c9bb5f8dca2d40_2"
          },
          "properties": {}
        },
        {
          "ruleId": "93c626cc-5035-33bc-8ab5-97b095312dae",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/fetch_sources.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 9,
                  "endLine": 142,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        exec(\n            [\"git\", \"update-index\", \"--skip-worktree\", \"--\", submodule_path],\n            cwd=THEROCK_DIR,\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d44fc85daa19e136aa67a7353331f3eaf30c95a4fecc86fc584b376f42d0ac54c721dea52b860dcbf36b4374e78518cc3de37e7d65d2e2b116c9bb5f8dca2d40_3"
          },
          "properties": {}
        },
        {
          "ruleId": "bc0a995c-380e-3984-af82-7c74ecde0ee3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/fetch_sources.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 24,
                  "endLine": 155,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        patches_hash = hashlib.sha1()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fad1960c8aa3e491fb66123178e793b331a5bb1f2f73b3ae65477b204ce1287e5d169c5f674e3b2e9839f3b84ca4bd5426fc90ed32c481f1fbbf6484a108fb3e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "df3a601f-8073-3376-8c8f-eaa70be6f39a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/fetch_sources.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 5,
                  "endLine": 249,
                  "endColumn": 78,
                  "snippet": {
                    "text": "    exec([\"git\", \"submodule\", \"update\", \"--init\"] + update_args, cwd=git_dir)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d44fc85daa19e136aa67a7353331f3eaf30c95a4fecc86fc584b376f42d0ac54c721dea52b860dcbf36b4374e78518cc3de37e7d65d2e2b116c9bb5f8dca2d40_4"
          },
          "properties": {}
        },
        {
          "ruleId": "8979fb55-d7db-331b-812e-ac0444530e3e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/github_actions/build_configure.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 5,
                  "endLine": 77,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    subprocess.run(cmd, cwd=THEROCK_DIR, check=True)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bc727ac4efa52b5c8a5b512c08fc654028af6f187a72da7a38c5f76a7d3700a15cdf465f99f7bc2a10fcfb7f7effe12ddc054e77ae53eabf344212a450ad081a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2c14a099-d669-34a3-80f6-7c7882fcee0a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/github_actions/fetch_job_status.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    with urlopen(request) as response:"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ea80f6bccfde1464505bc901fd24c6d44769373c14c946dd7d12e53836b871aaba53afdfa8d4fd8c858fe6febe086c240ceacbc3d1f5b4e749aa6554553e871e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "845c927f-e94f-3bc1-a57e-61b154421c41",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/github_actions/create_log_index.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 9,
                  "endLine": 46,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        subprocess.run(\n            [\n                \"python\",\n                str(indexer_path),\n                normalize_path(log_dir),  # unnamed path arg in front of -f\n                \"-f\",\n                \"*.log\",\n                \"*.tar.gz\",  # accepts nargs! Take care not to consume path\n            ],\n            check=True,\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "708c42c30dac4d03c5f51c8db1c737bc8a39ab066cc35f03034df912aea29d87668021a0b7a49ec11c43d948c3d1c11a112be5260a4c2574452dd39ae373b419_0"
          },
          "properties": {}
        },
        {
          "ruleId": "98739e5a-194a-3d2c-a36c-3597d3e40531",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"\\(([^)]*)\\)\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/github_actions/populate_redshift_db.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 33,
                  "endLine": 128,
                  "endColumn": 72,
                  "snippet": {
                    "text": "                        match = re.search(r\"\\(([^)]*)\\)\", platform_str)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0dfbd8649cf47a893e78792f063faccb20de3ffe94bde971bb7b48e74c895589de2d67a2bae4fc47ae132a5a8524916e12f4813dc73d8b160d5d7bf0f889a450_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9b37de60-b26f-3dae-acd5-fcf82528f1f9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"[^/]+$\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/github_actions/populate_redshift_db.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 33,
                  "endLine": 140,
                  "endColumn": 67,
                  "snippet": {
                    "text": "                    match_job = re.search(r\"[^/]+$\", platform_str)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b211eb4ba1ca9f48d48690aac9615049a2f46ddec24c07e0ccabc36c23d2ee026e1f78dd438f39152a47e0df7747c560118c0f73bc4db0413d6fd621a306c987_0"
          },
          "properties": {}
        },
        {
          "ruleId": "008ca5a9-5c3e-33e9-aab7-7fd044dfceb1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"^([1-9])\\.((0|([1-9][0-9]*)))(t)?$\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/github_actions/python_to_cp_version.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 12,
                  "endLine": 25,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    return re.match(r\"^([1-9])\\.((0|([1-9][0-9]*)))(t)?$\", version) is not None"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "605a3e917bf4552e56aadfb383421432884e8484aec6ab8052d042155f847a6928cccd5f8368883e545824c2a76989daae2d0f7070447ca27358eb587d1e4128_0"
          },
          "properties": {}
        },
        {
          "ruleId": "7cc42dab-feeb-3250-bb0d-02bfcbfab1a6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/github_actions/test_executable_scripts/test_hipblaslt.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 36,
                  "endColumn": 2,
                  "snippet": {
                    "text": "subprocess.run(\n    cmd,\n    cwd=THEROCK_DIR,\n    check=True,\n)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1de93b3f5a682cde78605b680f496d482aa41cd9539e2f8de7875419a9830300317b5a6110ad020bd5d795b81a56625e037195745ea2ec4ec6cc2e6d42c871a3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9b15a6c3-88e0-3de6-925f-3ad04ae997dc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/github_actions/test_executable_scripts/test_hipcub.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 2,
                  "snippet": {
                    "text": "subprocess.run(\n    cmd,\n    cwd=THEROCK_DIR,\n    check=True,\n)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e21a67d329002d2fbe595a5cc217382b7b38e1c01e07cce6e00c9ba6e5cb509b5ceea2446b9bb2ab176b7d0329bbcdc8a62d9601073ebc8e8657ab0351236a72_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b5c7ffe3-7e7a-393d-bfd6-b48afa09092d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/github_actions/test_executable_scripts/test_hiprand.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 2,
                  "snippet": {
                    "text": "subprocess.run(\n    cmd,\n    cwd=THEROCK_DIR,\n    check=True,\n)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "496203c7e3dd3b2ba83d099e3e94bd99ebd5fa829f757c41b37a938c89c61c42e15b5f30c496b9f7aed50a85f77f6071d1e2167758a7bcdf673c82b13ce76da3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f73402c9-aa81-3f65-9f72-731264937b72",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/github_actions/test_executable_scripts/test_hipsparse.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 2,
                  "snippet": {
                    "text": "subprocess.run(\n    cmd,\n    cwd=THEROCK_DIR,\n    check=True,\n    env={\"HIPSPARSE_CLIENTS_MATRICES_DIR\": f\"{OUTPUT_ARTIFACTS_DIR}/clients/matrices/\"},\n)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "232473cde31fbab9c80437c32d0a29c8596de66095ee6da9d5220c9693c37212ac00ac6bdb4f9624069321ca56e7083b2aa8a825229ff42dcf49a191fab44f7e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a60d54b1-b14d-3340-a4e6-19496619667d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/github_actions/test_executable_scripts/test_miopen.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 2,
                  "snippet": {
                    "text": "subprocess.run(\n    cmd,\n    cwd=THEROCK_DIR,\n    check=True,\n)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "332660c7f64dfcfa3a37baad17d698cf86b2880970eb29a94cf2a93eb2398a38ad8f4e6f4cb98f96950f74b0872e1782195a9164db945ea0968b8b8cef5db654_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b0b6ddca-096a-31ae-94d4-7a0954896760",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/github_actions/test_executable_scripts/test_rccl.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 18,
                  "endLine": 23,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        result = subprocess.run(\n            cmd,\n            cwd=THEROCK_DIR,\n            check=False,\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e2cd23a94f5b73b417eff1c1686026e76f430486c4cf209733235dfd5c5ac48fa1da3701c545fd46654f139cc45507d21a3c7d450770e4b149df296f781c6a00_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d81b132d-6a82-363a-81d8-657326819922",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/github_actions/test_executable_scripts/test_rccl.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 18,
                  "endLine": 50,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        result = subprocess.run(\n            cmd,\n            cwd=THEROCK_DIR,\n            check=False,\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e2cd23a94f5b73b417eff1c1686026e76f430486c4cf209733235dfd5c5ac48fa1da3701c545fd46654f139cc45507d21a3c7d450770e4b149df296f781c6a00_1"
          },
          "properties": {}
        },
        {
          "ruleId": "957f9c7d-1fea-376d-9c64-86e836e953b7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/github_actions/test_executable_scripts/test_rocblas.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 2,
                  "snippet": {
                    "text": "subprocess.run(\n    cmd,\n    cwd=THEROCK_DIR,\n    check=True,\n)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "57ad7c91f25eeb17ae8f679520f6cff4c58cc41b8a3c825078ee1a9042df0e47133a83ab7cf438b4d16bc9f47b3bc87569a58aaf6529e368f853fa3aec7e4e14_0"
          },
          "properties": {}
        },
        {
          "ruleId": "260f0cda-3a3b-35b9-b032-16715b1c8be3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/github_actions/test_executable_scripts/test_rocrand.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 2,
                  "snippet": {
                    "text": "subprocess.run(\n    cmd,\n    cwd=THEROCK_DIR,\n    check=True,\n)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e5a6cf70ac15041323e1785c7ac71c3f86818f7711b2e52c3e4d6124fc66f310f454e89831d2e60599615285ec36a42730480589979c6316ffe12bf4a57cf683_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f8705877-18b8-3e16-9fe1-00650a5524dd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/github_actions/test_executable_scripts/test_rocprim.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 2,
                  "snippet": {
                    "text": "subprocess.run(\n    cmd,\n    cwd=THEROCK_DIR,\n    check=True,\n)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "54bbfba17bad87e5364e41792f1128f18b34d063f583805af188fe9d337bf960d66863d55d319b8a8bd2547283ec060276c06e866d71b5ae6b7cfc6eb4693910_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ceab09b9-0caa-3166-9c9a-5c8b503ef6d8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/github_actions/test_executable_scripts/test_rocsparse.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 2,
                  "snippet": {
                    "text": "subprocess.run(\n    cmd,\n    cwd=THEROCK_DIR,\n    check=True,\n)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "733f186165096f1363a88175a8d5bc3685c3eaacc94064760edab11422c8cafb93f0faf76fc27b5bbf9dfbdab2cf356250aeddd1ebfd6d61783478b51236b45d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a86bb752-dfe2-3c67-9f36-78eee9ab0b41",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/github_actions/test_executable_scripts/test_rocthrust.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 1,
                  "endLine": 33,
                  "endColumn": 2,
                  "snippet": {
                    "text": "subprocess.run(\n    cmd,\n    cwd=THEROCK_DIR,\n    check=True,\n)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f978120afa41a7d5d79c4bb5f6a7909877e61715abb3726147a5a9e14267551634140ac20925fc0cf7eb9e0eb638fd9dbcfd76b38e40549ada5eef02171349f4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f0280792-f148-3c7f-aeb4-a02bdd7b6b37",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/github_actions/upload_build_artifacts.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 5,
                  "endLine": 29,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    subprocess.run(cmd, check=True)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5eeb495ff4688b5643ed3c96aa772719278f25c94ebf051b89d0b930974da6c06c2144dcc4a939677f1dcdd6d51febe7429fa0a801a4c648c8fe063c358c7dfb_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5623cc07-0bce-3bfb-96d0-8753fff28020",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/github_actions/upload_build_artifacts.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 5,
                  "endLine": 77,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    exec(cmd, cwd=Path.cwd())"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "681ea300bd9837d81f083a866ab5abab89d0ff441486ede749251d0f53af90af2de25b06f7c5c0a76893b458915c8d967b648841ea8496d4a00c36a38a135301_0"
          },
          "properties": {}
        },
        {
          "ruleId": "86bdfa92-fa1c-33c3-857f-07794fceabf9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/github_actions/upload_build_artifacts.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 5,
                  "endLine": 87,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    exec(cmd, cwd=Path.cwd())"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "681ea300bd9837d81f083a866ab5abab89d0ff441486ede749251d0f53af90af2de25b06f7c5c0a76893b458915c8d967b648841ea8496d4a00c36a38a135301_1"
          },
          "properties": {}
        },
        {
          "ruleId": "1739ec02-1de6-3586-9ff3-2846d9c483a5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/github_actions/upload_build_logs_to_s3.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 9,
                  "endLine": 40,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        subprocess.run(cmd, check=True)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "da5378bf7742c0401d1649191a511ce949baaacecda5b598fc762c76e6223cd019396fae6d51d0a73af9f03cc52436be59da89301e69b973ceb0dd969e0e746f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "399436a0-75a1-3178-95b5-7034028a5459",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "In Python3, a runtime `TypeError` will be thrown if you attempt to raise an object or class which does not inherit from `BaseException`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/hack/build_env_diag.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 21,
                  "endLine": 42,
                  "endColumn": 50,
                  "snippet": {
                    "text": "                    raise f\"WSL 1 not supported.\""
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "63e8ac85aa540e79fbadce28bd64f6c065ddc4ab903a75e97832c412a462f7d5ecc96e1188a15585d1297a178af509c588055910c94bf17dd37815a43bf7011c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2b6ae9af-71b8-3e99-9ef4-139c4aaf07cd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/hack/build_env_diag.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 25,
                  "endLine": 63,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        VERSION_QUERY = subprocess.run(\n            [f\"{exe.lower()}\", \"--version\"], capture_output=True, text=True, check=True\n        ).stdout.strip()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "61c69a8a34caa8414e807555eaa25c9e4432553736c3b7e4b3e07ea214330b4d3547f46813dc3cf6cf8b3d5d5dbb6598ea9fa458c15ce7bcec066c41c84bf880_0"
          },
          "properties": {}
        },
        {
          "ruleId": "89f2489c-c5d1-36c6-8870-356a6eb73057",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"(\\d+)\\.(\\d+)\\.(\\d+)\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/hack/build_env_diag.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 25,
                  "endLine": 64,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        VERSION_VALUE = re.search(r\"(\\d+)\\.(\\d+)\\.(\\d+)\", VERSION_QUERY)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b2a03553734cb21563d1ad8b1907d3df45f29b1bb2b7cdb0fd4aeaa6d948ba8813443b7587d2af938f3f35cb05a2cb733889979ae483b49ccb5085bbe429d13e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1dde94d0-6578-314a-b874-257f2e5a6a57",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'^NAME=\"?(.*?)\"?$'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/hack/build_env_diag.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 9,
                  "endLine": 218,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        re.search(r'^NAME=\"?(.*?)\"?$', LINUX_DISTRO_QUERY, re.MULTILINE)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1f5b0dca0a3deaa8b0a0a58b21f299be7800dc02fbf9e77d8841e3d1485d3cf6d3fdb0cc793965316e3a8012d277ad2b0ec2ee4cee458fccf22f7d24d52d608c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c4c399be-7433-3ef4-9072-7ee8d9ceaebd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'^VERSION_ID=\"?(.*?)\"?$'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/hack/build_env_diag.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 9,
                  "endLine": 223,
                  "endColumn": 79,
                  "snippet": {
                    "text": "        re.search(r'^VERSION_ID=\"?(.*?)\"?$', LINUX_DISTRO_QUERY, re.MULTILINE)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "034f7925ee79f689b7b8c470f516dceed1110058d608518103278e6891993967cb46768dc9d9d7ebb0377fa701a2546b689f88be1429f8b452ce3166a6658656_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1e178bfb-d243-3af0-945d-4b856d74e5e4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"^\\s*Architecture:\\s*(.+)$\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/hack/build_env_diag.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 9,
                  "endLine": 242,
                  "endColumn": 79,
                  "snippet": {
                    "text": "        re.search(r\"^\\s*Architecture:\\s*(.+)$\", CPU_LSCPU_QUERY, re.MULTILINE)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "80473a4bde503ca710a9a29732142dced1f08506caa0db35b3a1ffa8d9957a2fc165e79dc87b3f4cb4856ddbdd22f8b43ccbe26ec275b41b136e20532fddf143_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0c51dc60-01da-3447-bd88-4928066a5577",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"Linux version (\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/hack/build_env_diag.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 26,
                  "endLine": 232,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    LINUX_KERNEL_VALUE = re.search(\n        r\"Linux version (\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)\", LINUX_KERNEL_QUERY\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "69f44009ea22d27ebf5505955281cff8572c7ca13237476240fef4eca8de0679d6827b8fef8fb03f8dca6242337f973788067ad8793fbbec61b5d6553ae8b25d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "eae8e175-4b11-3a19-b118-659c2d3d97aa",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"^\\s*Model name:\\s*(.+)$\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/hack/build_env_diag.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 9,
                  "endLine": 247,
                  "endColumn": 77,
                  "snippet": {
                    "text": "        re.search(r\"^\\s*Model name:\\s*(.+)$\", CPU_LSCPU_QUERY, re.MULTILINE)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d8b95f30b21af84551e65ca35b972d6bd96bf18da70416215d71c97ba1ae3bc6f33ad1193f412166ec6628db011704ee4065b193236fb71866892245c76cffd6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "681ca36c-02b9-3310-8011-f7867b8b2e0a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"^MemTotal:\\s+(\\d+)\\s+kB\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/hack/build_env_diag.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 9,
                  "endLine": 257,
                  "endColumn": 76,
                  "snippet": {
                    "text": "        re.search(r\"^MemTotal:\\s+(\\d+)\\s+kB\", MEM_INFO_QUERY, re.MULTILINE)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6df88001381486f68eef293378b01bb62ee0d575533f6f48fa83cbdda36399b704a430afb95db2ffd2c0af46aa393676b8468be85b662f40d184def5ed745fde_0"
          },
          "properties": {}
        },
        {
          "ruleId": "dd398a0d-f5f1-33ef-8248-0d4e381cba55",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"^MemAvailable:\\s+(\\d+)\\s+kB\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/hack/build_env_diag.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 9,
                  "endLine": 262,
                  "endColumn": 80,
                  "snippet": {
                    "text": "        re.search(r\"^MemAvailable:\\s+(\\d+)\\s+kB\", MEM_INFO_QUERY, re.MULTILINE)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "86bcc229f501694b1ba3fdaa3fac1cfe71b2307a1d3d668398f963a0d4333b23f556b24d85053c0a16dfd35d4cacc739a502059bcb881765247a37918c7b5328_0"
          },
          "properties": {}
        },
        {
          "ruleId": "eac51637-8c5d-3879-b57d-cf390a3a05a2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/install_rocm_from_artifacts.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 10,
                  "endLine": 68,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    with tarfile.open(destination) as extracted_tar_file:\n        extracted_tar_file.extractall(output_dir)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "de6e066171a07465791c13728ba691a907f643965c339d6b67b91ca2091f3c6056f8c4a193ed81b633eb02a57b469b6458de15c4e753c4b81ddae33d5ac712a2_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1f214241-8719-30d0-954b-7c8bb13c2dfd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"^SwapTotal:\\s+(\\d+)\\s+kB\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/hack/build_env_diag.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 9,
                  "endLine": 267,
                  "endColumn": 77,
                  "snippet": {
                    "text": "        re.search(r\"^SwapTotal:\\s+(\\d+)\\s+kB\", MEM_INFO_QUERY, re.MULTILINE)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c10f787b4510666d49df95d221e29a82a49baa6e3e0307acea1e5f084d55c9f516036ed76bf1e6037ee31a4a04b0cbff992a19645a519ba5db48debf5079260c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e930aa21-0dbf-3770-b061-cda2b08406fe",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `nightly_regex_expression` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/install_rocm_from_artifacts.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 23,
                  "endLine": 143,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    nightly_release = re.search(nightly_regex_expression, args.release) != None"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1ee8cb079bd7d5a6a9cf04c4a184598539915fb2e0a55e3a86a97b292919b695de4d9e7f1f3640257a0b5bebfb7e797c6736be257040e133b0277ff35cf05a57_0"
          },
          "properties": {}
        },
        {
          "ruleId": "be27822f-773a-341a-9a7c-a77ff764bc8e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `dev_regex_expression` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/install_rocm_from_artifacts.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 19,
                  "endLine": 144,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    dev_release = re.search(dev_regex_expression, args.release) != None"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ce1004992b61abc475563ecd3103a381e803c9face6e524443b4d2690fce9cce475e6f77065a3c00cc315bde4a2761e26210943d91371d9eadc9d7ae97a883c1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a9124860-7a32-3260-b075-d3309cb26ff6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_call' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/linux_portable_build.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 5,
                  "endLine": 39,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    subprocess.check_call(args, cwd=str(cwd))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4cd0ec5278d36cf6319a8e5e043318c62a910abef97d829153fea5a20377f60c81d3a35162024d55cbd76da56fb7269a301c85d677f5933b99f03ae04eb90302_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3a3ad12f-fa5e-3706-a62e-aaba98273e85",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/install_rocm_from_artifacts.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 9,
                  "endLine": 187,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        subprocess.run(cmd, check=True)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8ad2d9ae4d265db0eaff3c9854f594b3017e71a1925c0613d81c1b9a604e9cb1cf908489879950b5ab0651463d7d455580c36dc0fa79016b1d4ee2121fa5ee36_0"
          },
          "properties": {}
        },
        {
          "ruleId": "47983d6d-0677-31e3-aa42-d760e708db9a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/linux_portable_build.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 9,
                  "endLine": 44,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        exec([args.docker, \"pull\", args.image], cwd=THIS_DIR)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "08f5b99fdc81dc4bc9bd99a0d420fad3b62f89a0c82b940dd7210296467cc40875b1e6eabf6c7cdbdfd652a5c4ed9726b35c0c5030a7ffcceb0bf8e91c1890ef_0"
          },
          "properties": {}
        },
        {
          "ruleId": "896627e5-a38a-3ff2-b755-5b3a60ea0b84",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'Popen' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/linux_portable_build.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 13,
                  "endLine": 110,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        p = subprocess.Popen(cl, cwd=str(THIS_DIR))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "564c31dd8d81f31766a333e76f533f38e10cff509bebaa28813457b89f0ab87b2cbe0123e5b4ceafb63d453b8212ceeb3428b1f4ad7dcc1a8d70458d906fbcd7_0"
          },
          "properties": {}
        },
        {
          "ruleId": "34c751bf-ae90-37bc-b48d-2fb456a7a6cf",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/packaging/python/templates/rocm-sdk-core/src/rocm_sdk_core/_cli.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 19,
                  "endLine": 13,
                  "endColumn": 57,
                  "snippet": {
                    "text": "PLATFORM_MODULE = importlib.import_module(PLATFORM_NAME)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "376d039c3413f32a2603fda12012fbced0e843ea519efda1089f46c276ab45cba50c541589c7698d4bf993cd87231203f8a0558f3926d581af8422448b8a5e6e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8e67f652-4c16-3d74-9428-96dc1b66d008",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found dynamic content when spawning a process. This is dangerous if external\ndata can reach this function call because it allows a malicious actor to\nexecute commands. Ensure no external data reaches here.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/packaging/python/templates/rocm-sdk-core/src/rocm_sdk_core/_cli.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 5,
                  "endLine": 23,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    os.execv(full_path, [str(full_path)] + sys.argv[1:])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4f8ccf53aad87f640f8d3133f6719a21394768b2eefeaed43607118da5b47a57b36962d05606a022f572f9cb11e827ea587c5bac29c642452fcda07511795098_0"
          },
          "properties": {}
        },
        {
          "ruleId": "74b01d64-2859-3653-a94c-282a5d955dbf",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/packaging/python/templates/rocm-sdk-devel/src/rocm_sdk_devel/_cli.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 19,
                  "endLine": 12,
                  "endColumn": 57,
                  "snippet": {
                    "text": "PLATFORM_MODULE = importlib.import_module(PLATFORM_NAME)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fd319dd981f1aa59299ba968ccf5e3d0f1b83586758ed54616372315a1e68ed4f9fe2c0f8a8f27efeb0959072f3062a38822ede08beba6df771fec2147abbf7d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a150bc0b-1a2f-3753-89ae-f159ad74482d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found dynamic content when spawning a process. This is dangerous if external\ndata can reach this function call because it allows a malicious actor to\nexecute commands. Ensure no external data reaches here.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/packaging/python/templates/rocm-sdk-devel/src/rocm_sdk_devel/_cli.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 5,
                  "endLine": 19,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    os.execv(full_path, [str(full_path)] + sys.argv[1:])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d9f3262db9e4ae81a9d5ef4c95d203e91e72974d9a7e52620fbcd0a2f2514a68cf7db49a81415b8c85b84cb2626087891558df88df178597f4ed996af0334394_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3711bec2-affc-3867-a872-0e55f6c0b09d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/packaging/python/templates/rocm-sdk-libraries/src/rocm_sdk_libraries/_cli.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 19,
                  "endLine": 12,
                  "endColumn": 57,
                  "snippet": {
                    "text": "PLATFORM_MODULE = importlib.import_module(PLATFORM_NAME)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ed6ef38d04ac7cda0952306a8fbc0746e968bf5bb214e791b1438944a1334bfb825eb207fb9d18242777e750ff00a3408e70686767633403bc38f332b29ebc39_0"
          },
          "properties": {}
        },
        {
          "ruleId": "60774b38-3eeb-3886-a631-dc5ce7a55516",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found dynamic content when spawning a process. This is dangerous if external\ndata can reach this function call because it allows a malicious actor to\nexecute commands. Ensure no external data reaches here.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/packaging/python/templates/rocm-sdk-libraries/src/rocm_sdk_libraries/_cli.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 5,
                  "endLine": 19,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    os.execv(full_path, [str(full_path)] + sys.argv[1:])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "871b5b75df738d1786542cdae9d585425d51b05155452af5bfc93a6ac16b069e9db9399c9c3a4fecca8f4e3f6b5d587010fba6bec13cf8d6aec1ea50ceb9b6b1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f208e4f9-d8d5-31cd-ab06-1d6f24e51eab",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"[,;]\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/packaging/python/templates/rocm/src/rocm_sdk/__init__.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 54,
                  "endLine": 129,
                  "endColumn": 88,
                  "snippet": {
                    "text": "            addl_preload_split = [s.strip() for s in re.split(\"[,;]\", addl_preload_str)]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1f279bb28e8b2f538ade258e788b2eb9405894965cd022a1b81c884d8d3baf69dd1a826d2c379aac5aa4f121accf99bbc9fbad09e287efe75d817efd5c010b9d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "57c7cc3e-9f68-3288-bce3-42e7c7b11986",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `f\"^{pattern_str}$\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/packaging/python/templates/rocm/src/rocm_sdk/__init__.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 29,
                  "endLine": 145,
                  "endColumn": 59,
                  "snippet": {
                    "text": "            check_version = re.compile(f\"^{pattern_str}$\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "64cbc3e4a9aa346352e9c14ba93f4b3055d0314fe6de1b9e4cfbe54b43c93b9879270f129e960e0e68247013cfd8644adeded9a34c4e64d1fdcfa9311b54729a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d25a2723-088e-3541-8560-3f8417ee0037",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `check_version` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/packaging/python/templates/rocm/src/rocm_sdk/__init__.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 16,
                  "endLine": 146,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        if not re.match(check_version, __version__):"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6c92699529839ae09c204f012f5cc6481026bdf2e37fa040298d82d13e5ca8ce818bbc4223db57f46f7708de1ec4107e15a67e1bf7353dfd2264f5bc44f0d02a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "571926c3-e4e3-33b4-ab23-0eae443923a1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/packaging/python/templates/rocm/src/rocm_sdk/__main__.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 16,
                  "endLine": 78,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    core_mod = importlib.import_module(core_mod_name)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b587446375eb5c50b546c5a74a172fa3ae79357042c328b7156e981e00c2fd0d3a5cc858e787857c3b9eaee78e903a6b5aec6f88350136f71c91ff4d85e2f40f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8608088c-22c1-30bb-a229-082615bf4779",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/packaging/python/templates/rocm/src/rocm_sdk/_devel.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 18,
                  "endLine": 181,
                  "endColumn": 59,
                  "snippet": {
                    "text": "            with tarfile.open(tarfile_path, tarfile_mode) as tf:\n                while ti := tf.next():\n                    dest_path = site_lib_path / ti.name\n                    if ti.isfile() or ti.issym():\n                        parent_path = dest_path.parent\n                        if parent_path not in clean_dir_paths:\n                            _clean_dir(parent_path)\n                        tf.extract(ti, path=site_lib_path)\n                        if ti.name not in dist_file_path_names:\n                            # CSV record:\n                            #   path\n                            #   hash (empty)\n                            #   size (empty)\n                            record_file.write(f\"{ti.name},,\\n\")\n                        if _is_windows() and ti.issym():\n                            # Convert symlinks into hardlinks on Windows.\n                            # This saves disk space while improving compatibility\n                            # on systems without as robust symlink support.\n                            # As needed, we could also generate tarfiles with\n                            # copies instead of symlinks, at the cost of disk space.\n                            symlink_target = dest_path.readlink()\n                            hardlink_target = dest_path.parent / symlink_target\n                            dest_path.unlink()\n                            dest_path.hardlink_to(hardlink_target)\n                    elif ti.isdir():\n                        # We don't generally have directory entries, but handle\n                        # them if we do.\n                        if dest_path not in clean_dir_paths:\n                            _clean_dir(dest_path)\n                        tf.extract(ti, path=site_lib_path)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "caf3f275a7c83e988f3dafa31b3cdf3010dd0fdcae55fc9f7b79b61c1e37dadabfc89d38013d1ef19ae8ec77a7a6f971b6725c0025a1a27aeb61502787865f52_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4d57df0e-0461-322f-8c4d-64903fc3b647",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_output' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/patch_linux_so.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 12,
                  "endLine": 23,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    return subprocess.check_output(\n        args, cwd=str(cwd), stdin=subprocess.DEVNULL\n    ).decode()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fbe957f9a039d5e06762e49c8f2a7f809eaff0f1816d76c85cbb6cdc135fb7742c1ea3c91934f6a1ae96f8d95bf944d3341476aa58c132f82eb2c1e6c17d0c50_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1738d01b-6d71-3f4d-aa63-df91ea728432",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_call' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/patch_linux_so.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 5,
                  "endLine": 15,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    subprocess.check_call(args, cwd=str(cwd), stdin=subprocess.DEVNULL)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c32b4c7ca85d6e6dac8a0174e0b96854bc9856baf8b8b1717575f50abbf2c04ccdd13e427c100e5de4657bc3d86cb764fdde66ef524bbc1e5137775c1dc92d3b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1a751035-5897-35fb-8d8e-a1badce95690",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/patch_linux_so.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 9,
                  "endLine": 64,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        exec(\n            [\n                args.patchelf,\n                \"--set-soname\",\n                new_soname,\n                new_lib_path,\n            ],\n            cwd=Path.cwd(),\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b2cc346087511442d6cd9837c11805d68a1cfb6e52924b823cfed119e9ff9808ec5e94ce2c65242169703b4303cc0db389c3952b58804ca0b7614e8dc8b7767e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "13383246-33d6-3760-a196-6d60f0e80130",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/patch_linux_so.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 13,
                  "endLine": 89,
                  "endColumn": 14,
                  "snippet": {
                    "text": "            exec(\n                [\n                    args.patchelf,\n                    \"--replace-needed\",\n                    soname_from,\n                    soname_to,\n                    updated_lib,\n                ],\n                cwd=Path.cwd(),\n            )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b2cc346087511442d6cd9837c11805d68a1cfb6e52924b823cfed119e9ff9808ec5e94ce2c65242169703b4303cc0db389c3952b58804ca0b7614e8dc8b7767e_1"
          },
          "properties": {}
        },
        {
          "ruleId": "87f851f1-8c48-39b9-8941-61f39842fa30",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_call' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/patch_rocm_libraries.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 5,
                  "endLine": 43,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    subprocess.check_call(args, cwd=str(cwd), stdin=subprocess.DEVNULL)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0912fd47a6fe36be64c3dbaccaacf176fef8d247eca58699a3094a6a869a878d8a844855d9b06f41da7f443c0223535233a1e5101fe056ab24909a1aafaed150_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5fd8dfd2-908d-37fb-8b83-9b74be082221",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/patch_rocm_libraries.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 5,
                  "endLine": 66,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    exec(\n        [\"git\", \"update-index\", \"--skip-worktree\"],\n        cwd=args.repo,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "42fc600afd127517c58b85d76b71cc091c1117bd602c9f6ec517f3c3b3103689cb8db2e06dead7ec09b31b3568ef2bf76719b27a4770f7e19502431b94982869_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ad6cad85-6290-33dd-8249-407f9f4ffa8a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/patch_rocm_libraries.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 9,
                  "endLine": 103,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        exec(\n            [\n                \"git\",\n                \"-c\",\n                \"user.name=therockbot\",\n                \"-c\",\n                \"user.email=therockbot@amd.com\",\n                \"am\",\n                \"--whitespace=nowarn\",\n                \"--directory\",\n                f\"{apply_directory}\",\n            ]\n            + patch_files,\n            cwd=args.repo,\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "42fc600afd127517c58b85d76b71cc091c1117bd602c9f6ec517f3c3b3103689cb8db2e06dead7ec09b31b3568ef2bf76719b27a4770f7e19502431b94982869_1"
          },
          "properties": {}
        },
        {
          "ruleId": "cb343c52-f170-34d5-9d14-01822ed2f3b8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/patch_rocm_libraries.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 5,
                  "endLine": 111,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    exec(\n        [\"git\", \"update-index\", \"--skip-worktree\"],\n        cwd=args.repo,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "42fc600afd127517c58b85d76b71cc091c1117bd602c9f6ec517f3c3b3103689cb8db2e06dead7ec09b31b3568ef2bf76719b27a4770f7e19502431b94982869_2"
          },
          "properties": {}
        },
        {
          "ruleId": "251c9c06-a88a-3e09-a1e4-e837ca6b6440",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"^(.+ => )?(.+) \\(.+\\)$\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/posix_ccache_compiler_check.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 19,
                  "endLine": 69,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    ldd_pattern = re.compile(r\"^(.+ => )?(.+) \\(.+\\)$\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b105717b37665d9a278f6aa2506d2b3a1c44bda97af1447be0e3dc496b9ab6a926c5dc525ae5c49ec352a990f457a4b3c6cab21c5068d96700e92915188b33a3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2621ccff-ff97-3db4-b499-2b44b3dd4582",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `ldd_pattern` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/posix_ccache_compiler_check.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 13,
                  "endLine": 72,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        m = re.match(ldd_pattern, ldd_line)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ef2d63463fbc929154213c3fd4f3aff2656d1757c90c7bde19cc8a5ee8bb0e01392bb22c79004663f81b891cf205d0a781d0a9b235f83bcbe6257c6055a74ceb_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ef72b14d-3c60-38c1-a716-7e83df198d48",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_output' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/posix_ccache_compiler_check.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 9,
                  "endLine": 91,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        subprocess.check_output([\"sha256sum\"] + lib_paths).decode().splitlines()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0a7b9868553c4c8d747cf3c452e3b596bca0c1fb8abf36094e6cff176ebea03ad1f58be1832e541b6ae745e92a7bf625a33dd8b9548fdc11ec456b645aaddac3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "627781a0-f0f6-3ef5-8277-f9804f218334",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_call' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/setup_venv.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 5,
                  "endLine": 61,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    subprocess.check_call(args, cwd=str(cwd), stdin=subprocess.DEVNULL)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bfdf72d8d28d0e57907a49a733b74fc0532e9dafb2ac60de9cebece877e81aebf7afb0619aa30933f0acbc25e043edbfac94ff6c8a20693dd7b1d3d1fb018a5d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e2391726-cab7-3f99-905b-4c64dea4207f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/setup_venv.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 9,
                  "endLine": 93,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        exec([sys.executable, \"-m\", \"venv\", str(venv_dir)])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1b396c8b8277ef906166e9bb0ad933ba770f6884fb056e89e6c56577e148da0fd0660a2d8a6493b82123c3e32abfba6cda3619418bfb8b85d1e4a603619759a9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "db09189b-7e27-3a0c-9c29-7b58d49e353b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/setup_venv.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 5,
                  "endLine": 98,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    exec([str(python_exe), \"-m\", \"pip\", \"install\", \"--upgrade\", \"pip\"])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1b396c8b8277ef906166e9bb0ad933ba770f6884fb056e89e6c56577e148da0fd0660a2d8a6493b82123c3e32abfba6cda3619418bfb8b85d1e4a603619759a9_1"
          },
          "properties": {}
        },
        {
          "ruleId": "af385e57-8e87-3c49-8365-6c68728232ed",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/setup_venv.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 5,
                  "endLine": 122,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    exec(command)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1b396c8b8277ef906166e9bb0ad933ba770f6884fb056e89e6c56577e148da0fd0660a2d8a6493b82123c3e32abfba6cda3619418bfb8b85d1e4a603619759a9_2"
          },
          "properties": {}
        },
        {
          "ruleId": "f73595ef-af5e-34b7-9bf3-d23a582ce06f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'Popen' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/teatime.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 17,
                  "endLine": 136,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        child = subprocess.Popen(\n            child_arg_list, stderr=subprocess.STDOUT, stdout=subprocess.PIPE\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b35f4f508fb33640bdd7c97bface09c5ec20cff1dd8d4a21efeb7e5c7e366242a7c963838f64623dfb474a2ade2ddf70fe9f719c19a7ef79763b8e72f3de8b5c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "dbc50612-4881-3339-ac3c-ddcf367cecc3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Images should be tagged with an explicit version to produce deterministic container images."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockerfiles/build_manylinux_x86_64.Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 10,
                  "snippet": {
                    "text": "FROM quay.io/pypa/manylinux_2_28_x86_64@sha256:d632b5e68ab39e59e128dcf0e59e438b26f122d7f2d45f3eea69ffd2877ab017"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4059b9ee63ac6f5070cf44dcb21bdafccec86fbb9e430738698323bff129306ed9b6848c4b620951f308948be054398a84b2b5220af3dfb55d1de65f20cdef0f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "98ee7643-5162-3971-909d-8054cfba2a7b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "file object opened without corresponding close"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build_tools/teatime.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 13,
                  "endLine": 81,
                  "endColumn": 54,
                  "snippet": {
                    "text": "            self.log_file = open(self.log_path, \"wb\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6d6657e83d2b37985b6defeedd4944d86915a1ba12952d52928848704bbb99906dcf614d1718058279a7ba2374cc96828f8a5c0fa40309336ad579488030c88f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "77ad3af2-8fe0-3b5c-89d1-f73387c5b0c3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'pip install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockerfiles/build_manylinux_x86_64.Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 26,
                  "snippet": {
                    "text": "RUN pip install --upgrade pip setuptools==69.1.1 wheel==0.42.0 && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "db57d8ed4c14c57b5f790ed495279a0e1ac867b3f6d1a39d374922ea2a2392b5c4283f869052cbd7762551d8300af0ae57f2370e241ac174b36a04187a4810d2_0"
          },
          "properties": {}
        },
        {
          "ruleId": "555c44ea-0cb8-3200-8e2f-f0ce6b8f344b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This yum command does not end with '&& yum clean all'. Running 'yum clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockerfiles/build_manylinux_x86_64.Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 5,
                  "endLine": 59,
                  "endColumn": 16,
                  "snippet": {
                    "text": "RUN yum install -y epel-release && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b8721ef02d3c26b8ecaee0873dc0274b5867b82fa81d0b3617fc26825f39c1ec69799e70ef6ae280c20efe60695607e3bb50867ae95e0ec6979a11bea78c99ab_0"
          },
          "properties": {}
        },
        {
          "ruleId": "38fda9a0-5117-3eb9-83c2-b26cf75477b7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This yum command does not end with '&& yum clean all'. Running 'yum clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockerfiles/build_manylinux_x86_64.Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 5,
                  "endLine": 60,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    yum remove -y gcc-toolset* && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "76a5463365afa069807fa81daddb8d50f24a40507e8432b88ef0686214181c5b3a621f7531e1de9a05f1672e824e5699059b015c5f2be2710ce7ce2c1c3dc880_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e1421f36-ce22-3c55-b685-3881545904c5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This yum command does not end with '&& yum clean all'. Running 'yum clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockerfiles/build_manylinux_x86_64.Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 5,
                  "endLine": 61,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    yum install -y \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b8721ef02d3c26b8ecaee0873dc0274b5867b82fa81d0b3617fc26825f39c1ec69799e70ef6ae280c20efe60695607e3bb50867ae95e0ec6979a11bea78c99ab_1"
          },
          "properties": {}
        },
        {
          "ruleId": "745c88e5-5de7-3aa0-8f56-2a864339f087",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This yum command does not end with '&& yum clean all'. Running 'yum clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockerfiles/build_manylinux_x86_64.Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 5,
                  "endLine": 71,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    yum clean all && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "99283b679e8a9370304c6c6b53ed815f9215de7a44c0e0ec45cdb7954f2020be563222b031ffe9513b111accfa4e7a9ae3222a1394975df60c7b56794b460f88_0"
          },
          "properties": {}
        },
        {
          "ruleId": "53644bf7-7665-39ff-8bd5-69c5ba405d1d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Only the exit code from the final command in this RUN instruction will be evaluated unless 'pipefail' is set.\nIf you want to fail the command at any stage in the pipe, set 'pipefail' by including 'SHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"] before the command.\nIf you're using alpine and don't have bash installed, communicate this explicitly with `SHELL [\"/bin/ash\"]`.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockerfiles/build_manylinux_x86_64.Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 1,
                  "endLine": 87,
                  "endColumn": 26,
                  "snippet": {
                    "text": "RUN which gcc && gcc --version && \\\n    which g++ && g++ --version && \\\n    which clang++ || true"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ed094d8a6868019460e1fc7f976462d8392d58946955b8b1753c0dd0b994c666ad222aedcf2ce0e0f994e2bc38669f98cd860d80fd5ee5cdb9446a62e6fd72b6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a4625652-8d19-315c-a1a8-5601a0e470b5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockerfiles/no_rocm_image_ubuntu24_04.Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 8,
                  "snippet": {
                    "text": "RUN apt update && apt install sudo -y"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "75136c49b1a854472046854b2b0ce57e1b64444223e199b484878d64a1422a87dc3e2b9a0ffc5f327f59d019f495628e947772b84d5ec707bdf681ec41cb2ced_0"
          },
          "properties": {}
        },
        {
          "ruleId": "90f2c7fc-94af-3d68-a0b5-9442be0cb4d7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using sudo in Dockerfiles. Running processes as a non-root user can help  reduce the potential impact of configuration errors and security vulnerabilities."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dockerfiles/no_rocm_image_ubuntu24_04.Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 11,
                  "snippet": {
                    "text": "RUN sudo apt-get update -y \\\n    && sudo apt-get install -y software-properties-common \\\n    && sudo add-apt-repository -y ppa:git-core/ppa \\\n    && sudo apt-get update -y \\\n    && sudo apt-get install -y --no-install-recommends \\\n    curl \\\n    ca-certificates \\\n    git \\\n    jq \\\n    unzip \\\n    zip \\\n    cmake \\\n    ninja-build \\\n    clang \\\n    lld \\\n    wget \\\n    psmisc"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2f2c968d70505688e045961dd50048453f0b93c47bd14680c786dcbdfed88c73b5c99314bab559e696fd1f1fd3d0671603c7ecf2038e87c5d310584c00fc5c57_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6f15a8b5-49d0-3908-a970-135f094ee31c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "experimental/rockbuilder/lib_python/repo_management.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 21,
                  "endLine": 208,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                    time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "29b25208df44b6eee8ca166c89b81ca02d037b351bc9018d3e00c11105caf950a91453e592853397eefd520afdff7ad963dd59cfb9596035c9b8b38315862158_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2ae2b73e-8ac6-3203-83d4-ab438e6c6371",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "experimental/rockbuilder/lib_python/repo_management.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 17,
                  "endLine": 215,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "29b25208df44b6eee8ca166c89b81ca02d037b351bc9018d3e00c11105caf950a91453e592853397eefd520afdff7ad963dd59cfb9596035c9b8b38315862158_1"
          },
          "properties": {}
        },
        {
          "ruleId": "f987d267-332d-3626-a4c3-5c89855aae55",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_call' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "experimental/rockbuilder/lib_python/repo_management.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 9,
                  "endLine": 228,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        subprocess.check_call(\n            args,\n            cwd=str(cwd),\n            stdin=subprocess.DEVNULL,\n            stdout=subprocess.DEVNULL if stdout_devnull else None,\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cf4cf3c81b3766b7cde67a619c9faa992fc7528b093005a7d323a136e8998e808b14a33c81e5810475dd43426b79fb2731caed55472b8d8e6022c90cec7d4659_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8b982c71-b4b2-3945-a2ae-768d6df8bca3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_output' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "experimental/rockbuilder/lib_python/repo_management.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 22,
                  "endLine": 254,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        raw_output = subprocess.check_output(\n            [\"git\", \"submodule\", \"status\"] + recursive_args,\n            cwd=str(repo_path),\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "89856224fe007322c0383d3ffb585b82656753ef4a94f0f46f1dbf0645c2710c0004719913202ddf11b66c0fb45040f0b33ce195b94fcd895353049726fd9fbb_0"
          },
          "properties": {}
        },
        {
          "ruleId": "48bed010-638e-3cb6-b7d1-d8cc57e3fca0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "experimental/rockbuilder/rockbuilder.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 476,
                  "startColumn": 1,
                  "endLine": 476,
                  "endColumn": 14,
                  "snippet": {
                    "text": "time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bd4480005823af1e4842e3a4053404876ebdef3d6c6de4cb99cd13fe069f609cb83665672aadbf2e7cb6630885302efa98df2cde896abd3f799f9189dd59d3c9_1"
          },
          "properties": {}
        },
        {
          "ruleId": "c3052a27-e086-33de-972c-4e2138fc850e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "experimental/rockbuilder/rockbuilder.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 5,
                  "endLine": 37,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bd4480005823af1e4842e3a4053404876ebdef3d6c6de4cb99cd13fe069f609cb83665672aadbf2e7cb6630885302efa98df2cde896abd3f799f9189dd59d3c9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "7a908f45-e2ce-3841-8abe-732f973f316f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_call' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/build_prod_wheels.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 5,
                  "endLine": 174,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    subprocess.check_call(args, cwd=str(cwd), env=full_env)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bc94429902af87fddf0640788c1754bffa57adf9eb6db4094798e3a3176bef55ee87d59026c0cf89c0f4a070e7b8e1ae6ef24ca784a5351d95cc2b3f9c96f734_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a8e0210d-db49-349e-ad7c-cfa0b9717deb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_output' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/build_prod_wheels.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 16,
                  "endLine": 183,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        return subprocess.check_output(\n            args, cwd=str(cwd), stderr=subprocess.STDOUT, text=True\n        ).strip()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "698e7caca861fe2f4f8bf2781d2362d58f6d7acf009ff163f076f180e421c747289f8e6e65e8a6b07c8f33e79380d66ed0f27e6b86cf4601c97412f9abb256f2_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6ef17ed1-f5a8-3ff6-9f99-ff3a9167260f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/build_prod_wheels.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 5,
                  "endLine": 310,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    exec(pip_args, cwd=Path.cwd())"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1f4f2217c3f6df7037264c5ffb0609abf25cec467a2ccbab09d8c1454fbe9fc1f37e73e22f93a40930fdb3f8caf8931002ada97edef29a2eb0f79f6ba60fef3d_1"
          },
          "properties": {}
        },
        {
          "ruleId": "2ef656ea-1a94-399b-9087-68526ae047ce",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/build_prod_wheels.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 5,
                  "endLine": 291,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    exec(\n        [sys.executable, \"-m\", \"pip\", \"cache\", \"remove\", \"rocm_sdk\"] + cache_dir_args,\n        cwd=Path.cwd(),\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1f4f2217c3f6df7037264c5ffb0609abf25cec467a2ccbab09d8c1454fbe9fc1f37e73e22f93a40930fdb3f8caf8931002ada97edef29a2eb0f79f6ba60fef3d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "206c3841-756b-3873-8bc3-7ee9046a1ff4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/build_prod_wheels.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 502,
                  "startColumn": 5,
                  "endLine": 505,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    exec(\n        [sys.executable, \"-m\", \"pip\", \"uninstall\", triton_wheel_name, \"-y\"],\n        cwd=tempfile.gettempdir(),\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1f4f2217c3f6df7037264c5ffb0609abf25cec467a2ccbab09d8c1454fbe9fc1f37e73e22f93a40930fdb3f8caf8931002ada97edef29a2eb0f79f6ba60fef3d_2"
          },
          "properties": {}
        },
        {
          "ruleId": "4c72401a-dc51-36d8-8520-a97974169b5d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/build_prod_wheels.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 510,
                  "startColumn": 5,
                  "endLine": 521,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    exec(\n        [\n            sys.executable,\n            \"-m\",\n            \"pip\",\n            \"install\",\n            \"-r\",\n            triton_dir / \"python\" / \"requirements.txt\",\n        ]\n        + pip_install_args,\n        cwd=triton_dir,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1f4f2217c3f6df7037264c5ffb0609abf25cec467a2ccbab09d8c1454fbe9fc1f37e73e22f93a40930fdb3f8caf8931002ada97edef29a2eb0f79f6ba60fef3d_3"
          },
          "properties": {}
        },
        {
          "ruleId": "19bf931e-c93e-305e-a317-2a26e3d1ba42",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/build_prod_wheels.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 531,
                  "startColumn": 5,
                  "endLine": 531,
                  "endColumn": 86,
                  "snippet": {
                    "text": "    exec([sys.executable, \"setup.py\", \"bdist_wheel\"], cwd=triton_python_dir, env=env)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1f4f2217c3f6df7037264c5ffb0609abf25cec467a2ccbab09d8c1454fbe9fc1f37e73e22f93a40930fdb3f8caf8931002ada97edef29a2eb0f79f6ba60fef3d_4"
          },
          "properties": {}
        },
        {
          "ruleId": "2feb4cc5-66e8-331c-872d-c517bcdbfbd1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/build_prod_wheels.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 537,
                  "startColumn": 5,
                  "endLine": 539,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    exec(\n        [sys.executable, \"-m\", \"pip\", \"install\", built_wheel], cwd=tempfile.gettempdir()\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1f4f2217c3f6df7037264c5ffb0609abf25cec467a2ccbab09d8c1454fbe9fc1f37e73e22f93a40930fdb3f8caf8931002ada97edef29a2eb0f79f6ba60fef3d_5"
          },
          "properties": {}
        },
        {
          "ruleId": "e0188279-5400-35a1-831e-8e364febea4a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/build_prod_wheels.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 623,
                  "startColumn": 5,
                  "endLine": 626,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    exec(\n        [sys.executable, \"-m\", \"pip\", \"uninstall\", \"torch\", \"-y\"],\n        cwd=tempfile.gettempdir(),\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1f4f2217c3f6df7037264c5ffb0609abf25cec467a2ccbab09d8c1454fbe9fc1f37e73e22f93a40930fdb3f8caf8931002ada97edef29a2eb0f79f6ba60fef3d_6"
          },
          "properties": {}
        },
        {
          "ruleId": "ad0f7f70-9b49-3baa-8f1b-99b58d241ae9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/build_prod_wheels.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 632,
                  "startColumn": 5,
                  "endLine": 643,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    exec(\n        [\n            sys.executable,\n            \"-m\",\n            \"pip\",\n            \"install\",\n            \"-r\",\n            pytorch_dir / \"requirements.txt\",\n        ]\n        + pip_install_args,\n        cwd=pytorch_dir,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1f4f2217c3f6df7037264c5ffb0609abf25cec467a2ccbab09d8c1454fbe9fc1f37e73e22f93a40930fdb3f8caf8931002ada97edef29a2eb0f79f6ba60fef3d_7"
          },
          "properties": {}
        },
        {
          "ruleId": "e55630b7-cdf5-3220-8ea6-2cce7ad84c78",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/build_prod_wheels.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 665,
                  "startColumn": 5,
                  "endLine": 665,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    exec([sys.executable, \"setup.py\", \"bdist_wheel\"], cwd=pytorch_dir, env=env)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1f4f2217c3f6df7037264c5ffb0609abf25cec467a2ccbab09d8c1454fbe9fc1f37e73e22f93a40930fdb3f8caf8931002ada97edef29a2eb0f79f6ba60fef3d_9"
          },
          "properties": {}
        },
        {
          "ruleId": "e09e4b19-fa58-33f0-b38c-058572112e64",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/build_prod_wheels.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 650,
                  "startColumn": 9,
                  "endLine": 660,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        exec(\n            [\n                sys.executable,\n                \"-m\",\n                \"pip\",\n                \"uninstall\",\n                \"ninja\",\n                \"-y\",\n            ],\n            cwd=pytorch_dir,\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1f4f2217c3f6df7037264c5ffb0609abf25cec467a2ccbab09d8c1454fbe9fc1f37e73e22f93a40930fdb3f8caf8931002ada97edef29a2eb0f79f6ba60fef3d_8"
          },
          "properties": {}
        },
        {
          "ruleId": "881d1438-a4da-34bb-955a-724ecd56b15f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/build_prod_wheels.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 710,
                  "startColumn": 5,
                  "endLine": 710,
                  "endColumn": 86,
                  "snippet": {
                    "text": "    exec([sys.executable, \"setup.py\", \"bdist_wheel\"], cwd=pytorch_audio_dir, env=env)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1f4f2217c3f6df7037264c5ffb0609abf25cec467a2ccbab09d8c1454fbe9fc1f37e73e22f93a40930fdb3f8caf8931002ada97edef29a2eb0f79f6ba60fef3d_11"
          },
          "properties": {}
        },
        {
          "ruleId": "79bac9de-d8fc-3ef2-8950-4a89ce9691e5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/build_prod_wheels.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 671,
                  "startColumn": 5,
                  "endLine": 673,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    exec(\n        [sys.executable, \"-m\", \"pip\", \"install\", built_wheel], cwd=tempfile.gettempdir()\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1f4f2217c3f6df7037264c5ffb0609abf25cec467a2ccbab09d8c1454fbe9fc1f37e73e22f93a40930fdb3f8caf8931002ada97edef29a2eb0f79f6ba60fef3d_10"
          },
          "properties": {}
        },
        {
          "ruleId": "3020b41c-2002-3e56-b9fa-4f9c978dc493",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/build_prod_wheels.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 746,
                  "startColumn": 5,
                  "endLine": 746,
                  "endColumn": 87,
                  "snippet": {
                    "text": "    exec([sys.executable, \"setup.py\", \"bdist_wheel\"], cwd=pytorch_vision_dir, env=env)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1f4f2217c3f6df7037264c5ffb0609abf25cec467a2ccbab09d8c1454fbe9fc1f37e73e22f93a40930fdb3f8caf8931002ada97edef29a2eb0f79f6ba60fef3d_12"
          },
          "properties": {}
        },
        {
          "ruleId": "c44f754b-2d5b-31e1-ba81-134c9bbacdf9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_call' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/repo_management.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 5,
                  "endLine": 22,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    subprocess.check_call(\n        args,\n        cwd=str(cwd),\n        stdin=subprocess.DEVNULL,\n        stdout=subprocess.DEVNULL if stdout_devnull else None,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1c11d057cc9c9ba0df8e3396f802ab9c7f3fd3fa3898cfdbc75069b5c8751c27f3daf822d4acece4ef920c2c44bb449f2c07b7e3a309f1a88cfeb8812ea5a488_0"
          },
          "properties": {}
        },
        {
          "ruleId": "661a1ad3-f192-363e-ae8e-c827cdd1515f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_output' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/repo_management.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 18,
                  "endLine": 51,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    raw_output = subprocess.check_output(\n        [\"git\", \"submodule\", \"status\"] + recursive_args,\n        cwd=str(repo_path),\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c271951e6d94d5f099045708a4e741ae514c429219ef78b8f253c1044304bdf06019aec4285362abb4f87c51e351349b21ac12d5e4262fb898119da258eb832a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "64a74bcf-54e7-329f-8647-d59ed31bb898",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/repo_management.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 17,
                  "endLine": 106,
                  "endColumn": 75,
                  "snippet": {
                    "text": "                exec([\"git\", \"config\", ignore_name, \"all\"], cwd=repo_path)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5fc65f3a2a305811b42a031b679466caa60252676c693f20f05f1ebcfb7dd22317b5f2ee88559300abe2a24c67fb1ee35eaf6adce7fdcb029f1a38f7fdb4cdf2_0"
          },
          "properties": {}
        },
        {
          "ruleId": "67ce4e0d-1b5a-326d-9a15-3d30e8cdaff6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/repo_management.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 13,
                  "endLine": 111,
                  "endColumn": 14,
                  "snippet": {
                    "text": "            exec(\n                [\"git\", \"update-index\", \"--skip-worktree\"] + submodule_paths,\n                cwd=repo_path,\n            )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5fc65f3a2a305811b42a031b679466caa60252676c693f20f05f1ebcfb7dd22317b5f2ee88559300abe2a24c67fb1ee35eaf6adce7fdcb029f1a38f7fdb4cdf2_1"
          },
          "properties": {}
        },
        {
          "ruleId": "9e5d9dff-92f7-35a1-8e58-db5d902160bc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/repo_management.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 9,
                  "endLine": 144,
                  "endColumn": 84,
                  "snippet": {
                    "text": "        exec([\"git\", \"format-patch\", \"-o\", base_path, base_revlist], cwd=repo_path)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5fc65f3a2a305811b42a031b679466caa60252676c693f20f05f1ebcfb7dd22317b5f2ee88559300abe2a24c67fb1ee35eaf6adce7fdcb029f1a38f7fdb4cdf2_2"
          },
          "properties": {}
        },
        {
          "ruleId": "030a4d97-2a7c-36b9-836f-1d924fdd2fa5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/repo_management.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 9,
                  "endLine": 151,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        exec(\n            [\"git\", \"format-patch\", \"-o\", hipified_path, hipified_revlist],\n            cwd=repo_path,\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5fc65f3a2a305811b42a031b679466caa60252676c693f20f05f1ebcfb7dd22317b5f2ee88559300abe2a24c67fb1ee35eaf6adce7fdcb029f1a38f7fdb4cdf2_3"
          },
          "properties": {}
        },
        {
          "ruleId": "8d21ce05-e891-310f-af59-4232b80ca70e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/repo_management.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 5,
                  "endLine": 171,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    exec(\n        [\n            \"git\",\n            \"am\",\n            \"--whitespace=nowarn\",\n            \"--committer-date-is-author-date\",\n            \"--no-gpg-sign\",\n        ]\n        + patch_files,\n        cwd=repo_path,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5fc65f3a2a305811b42a031b679466caa60252676c693f20f05f1ebcfb7dd22317b5f2ee88559300abe2a24c67fb1ee35eaf6adce7fdcb029f1a38f7fdb4cdf2_4"
          },
          "properties": {}
        },
        {
          "ruleId": "9d85b6fc-3c92-384d-8020-2f89d6e39c75",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/repo_management.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 9,
                  "endLine": 211,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        exec([sys.executable, build_amd_path], cwd=repo_dir)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5fc65f3a2a305811b42a031b679466caa60252676c693f20f05f1ebcfb7dd22317b5f2ee88559300abe2a24c67fb1ee35eaf6adce7fdcb029f1a38f7fdb4cdf2_5"
          },
          "properties": {}
        },
        {
          "ruleId": "52525e89-8324-3608-94ff-fd918597bbca",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/repo_management.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 9,
                  "endLine": 224,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        exec([\"git\", \"add\", \"-A\"], cwd=module_path)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5fc65f3a2a305811b42a031b679466caa60252676c693f20f05f1ebcfb7dd22317b5f2ee88559300abe2a24c67fb1ee35eaf6adce7fdcb029f1a38f7fdb4cdf2_6"
          },
          "properties": {}
        },
        {
          "ruleId": "01a9a380-998b-3af6-b073-d534df0d80ab",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/repo_management.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 9,
                  "endLine": 228,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        exec(\n            [\"git\", \"commit\", \"-m\", HIPIFY_COMMIT_MESSAGE, \"--no-gpg-sign\"],\n            cwd=module_path,\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5fc65f3a2a305811b42a031b679466caa60252676c693f20f05f1ebcfb7dd22317b5f2ee88559300abe2a24c67fb1ee35eaf6adce7fdcb029f1a38f7fdb4cdf2_7"
          },
          "properties": {}
        },
        {
          "ruleId": "27df5807-5174-3f40-b70e-427e3c5491a7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/repo_management.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 9,
                  "endLine": 229,
                  "endColumn": 86,
                  "snippet": {
                    "text": "        exec([\"git\", \"tag\", \"-f\", TAG_HIPIFY_DIFFBASE, \"--no-sign\"], cwd=module_path)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5fc65f3a2a305811b42a031b679466caa60252676c693f20f05f1ebcfb7dd22317b5f2ee88559300abe2a24c67fb1ee35eaf6adce7fdcb029f1a38f7fdb4cdf2_8"
          },
          "properties": {}
        },
        {
          "ruleId": "b35f4991-5f68-315c-b42f-f2e3f1453141",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/repo_management.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 9,
                  "endLine": 239,
                  "endColumn": 88,
                  "snippet": {
                    "text": "        exec([\"git\", \"remote\", \"set-url\", \"origin\", args.gitrepo_origin], cwd=repo_dir)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5fc65f3a2a305811b42a031b679466caa60252676c693f20f05f1ebcfb7dd22317b5f2ee88559300abe2a24c67fb1ee35eaf6adce7fdcb029f1a38f7fdb4cdf2_9"
          },
          "properties": {}
        },
        {
          "ruleId": "2dfd5922-2c1c-3b26-8c75-8a1307aa25db",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/repo_management.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 9,
                  "endLine": 243,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        exec([\"git\", \"init\", \"--initial-branch=main\"], cwd=repo_dir)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5fc65f3a2a305811b42a031b679466caa60252676c693f20f05f1ebcfb7dd22317b5f2ee88559300abe2a24c67fb1ee35eaf6adce7fdcb029f1a38f7fdb4cdf2_10"
          },
          "properties": {}
        },
        {
          "ruleId": "4ff967ef-e3f1-31f9-bd2f-f60009f5e0ff",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/repo_management.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 9,
                  "endLine": 244,
                  "endColumn": 78,
                  "snippet": {
                    "text": "        exec([\"git\", \"config\", \"advice.detachedHead\", \"false\"], cwd=repo_dir)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5fc65f3a2a305811b42a031b679466caa60252676c693f20f05f1ebcfb7dd22317b5f2ee88559300abe2a24c67fb1ee35eaf6adce7fdcb029f1a38f7fdb4cdf2_11"
          },
          "properties": {}
        },
        {
          "ruleId": "c273a7d0-6c10-301b-a29f-ff79ef098d4d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/repo_management.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 9,
                  "endLine": 245,
                  "endColumn": 84,
                  "snippet": {
                    "text": "        exec([\"git\", \"remote\", \"add\", \"origin\", args.gitrepo_origin], cwd=repo_dir)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5fc65f3a2a305811b42a031b679466caa60252676c693f20f05f1ebcfb7dd22317b5f2ee88559300abe2a24c67fb1ee35eaf6adce7fdcb029f1a38f7fdb4cdf2_12"
          },
          "properties": {}
        },
        {
          "ruleId": "f147fe97-4313-345d-b370-d5bef2687c27",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/repo_management.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 5,
                  "endLine": 253,
                  "endColumn": 86,
                  "snippet": {
                    "text": "    exec([\"git\", \"fetch\"] + fetch_args + [\"origin\", args.repo_hashtag], cwd=repo_dir)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5fc65f3a2a305811b42a031b679466caa60252676c693f20f05f1ebcfb7dd22317b5f2ee88559300abe2a24c67fb1ee35eaf6adce7fdcb029f1a38f7fdb4cdf2_13"
          },
          "properties": {}
        },
        {
          "ruleId": "72a9d4e5-f302-3148-96d3-2768db2b10e0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/repo_management.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 5,
                  "endLine": 254,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    exec([\"git\", \"checkout\", \"FETCH_HEAD\"], cwd=repo_dir)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5fc65f3a2a305811b42a031b679466caa60252676c693f20f05f1ebcfb7dd22317b5f2ee88559300abe2a24c67fb1ee35eaf6adce7fdcb029f1a38f7fdb4cdf2_14"
          },
          "properties": {}
        },
        {
          "ruleId": "8ecb3cb7-5541-3be8-963b-c513e741b219",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/repo_management.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 5,
                  "endLine": 255,
                  "endColumn": 81,
                  "snippet": {
                    "text": "    exec([\"git\", \"tag\", \"-f\", TAG_UPSTREAM_DIFFBASE, \"--no-sign\"], cwd=repo_dir)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5fc65f3a2a305811b42a031b679466caa60252676c693f20f05f1ebcfb7dd22317b5f2ee88559300abe2a24c67fb1ee35eaf6adce7fdcb029f1a38f7fdb4cdf2_15"
          },
          "properties": {}
        },
        {
          "ruleId": "e22a269e-55aa-3868-8ed1-2cebe97e28be",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/repo_management.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 9,
                  "endLine": 260,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        exec(\n            [\"git\", \"submodule\", \"update\", \"--init\", \"--recursive\"] + fetch_args,\n            cwd=repo_dir,\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5fc65f3a2a305811b42a031b679466caa60252676c693f20f05f1ebcfb7dd22317b5f2ee88559300abe2a24c67fb1ee35eaf6adce7fdcb029f1a38f7fdb4cdf2_16"
          },
          "properties": {}
        },
        {
          "ruleId": "4fb70e11-e481-3a2a-91a0-b54bd41a2e64",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/repo_management.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 5,
                  "endLine": 274,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    exec(\n        [\n            \"git\",\n            \"submodule\",\n            \"foreach\",\n            \"--recursive\",\n            f\"git tag -f {TAG_UPSTREAM_DIFFBASE} --no-sign\",\n        ],\n        cwd=repo_dir,\n        stdout_devnull=True,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5fc65f3a2a305811b42a031b679466caa60252676c693f20f05f1ebcfb7dd22317b5f2ee88559300abe2a24c67fb1ee35eaf6adce7fdcb029f1a38f7fdb4cdf2_17"
          },
          "properties": {}
        },
        {
          "ruleId": "cc26142e-4d1c-33ef-8976-4913d8335960",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `rf\"^{re.escape(expected_name)}-[\\d\\.]+.*\\.whl$\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external-builds/pytorch/sanity_check_wheel.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 21,
                  "endLine": 21,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    wheel_name_re = re.compile(rf\"^{re.escape(expected_name)}-[\\d\\.]+.*\\.whl$\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a466038b75badc396452ee4e35858547bb2b08b84470fd67b9f1d79519215953d5de853b6db15a94bd1ee6c17a6c9fa29795e011074c3a7f6e3e95c8701539e6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "decd9af5-96d4-3679-8203-c10a3632407d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "file object opened without corresponding close"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "third-party/indexer/indexer.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 9,
                  "endLine": 34,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        index_file = open(index_path, \"w\", encoding=\"utf-8\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "82b9b67f5642c17cf8f0f00dc4680537d6f74b28d57dd43f6e72567d6d6d0f2cbdc706356c7f4b76bb9ad108467e39385504edbf613810d861212ae047b723e8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "934dc4a9-00d0-35a5-9870-56f21d81be5b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_call' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "third-party/sysdeps/common/zlib/patch_install.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 5,
                  "endLine": 28,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    subprocess.check_call(\n        [\n            sys.executable,\n            str(Path(THEROCK_SOURCE_DIR) / \"build_tools\" / \"patch_linux_so.py\"),\n            \"--patchelf\",\n            PATCHELF,\n            \"--add-prefix\",\n            \"rocm_sysdeps_\",\n            str(Path(PREFIX) / \"lib\" / \"libz.so\"),\n        ]\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2680262cf9c63912b3478defc45692306c4f7a4ff6da3778858080608dba7a19fc2b0584d04474a252f99c709eea882b7f100912a83e5ed5a5764cb5daa4d975_0"
          },
          "properties": {}
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}