name: Build Windows PyTorch Wheels

on:
  workflow_call:
    inputs:
      amdgpu_family:
        required: true
        type: string
      python_version:
        required: true
        type: string
      release_type:
        description: The type of release to build ("nightly", or "dev")
        required: true
        type: string
      s3_subdir:
        description: S3 subdirectory, not including the GPU-family
        required: true
        type: string
      cloudfront_url:
        description: CloudFront URL pointing to Python index
        required: true
        type: string
      rocm_version:
        description: ROCm version to pip install
        type: string
  workflow_dispatch:
    inputs:
      amdgpu_family:
        type: choice
        options:
          - gfx110X-dgpu
          - gfx1151
          - gfx120X-all
          - gfx94X-dcgpu
          - gfx950-dcgpu
        default: gfx1151
      python_version:
        required: true
        type: string
        default: "3.12"
      release_type:
        description: The type of release to build ("nightly", or "dev")
        type: string
        default: "dev"
      s3_subdir:
        description: S3 subdirectory, not including the GPU-family
        type: string
        default: "v2"
      cloudfront_url:
        description: CloudFront base URL pointing to Python index
        type: string
        default: "https://d25kgig7rdsyks.cloudfront.net/v2"
      rocm_version:
        description: ROCm version to pip install
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  build_pytorch_wheels:
    name: Build Windows PyTorch Wheels | ${{ inputs.amdgpu_family }} | Python ${{ inputs.python_version }}
    runs-on: ${{ github.repository_owner == 'ROCm' && 'azure-windows-scale-rocm' || 'windows-2022' }}
    env:
      CHECKOUT_ROOT: B:/src
      OUTPUT_DIR: ${{ github.workspace }}/output
      # Note the \ here instead of /. This should be used from 'cmd' not 'bash'!
      PACKAGE_DIST_DIR: ${{ github.workspace }}\output\packages\dist
      S3_BUCKET_PY: "therock-${{ inputs.release_type }}-python"
      optional_build_prod_arguments: ""
    outputs:
      torch_version: ${{ steps.build-pytorch-wheels.outputs.torch_version }}
    defaults:
      run:
        # Note: there are mixed uses of 'bash' (this default) and 'cmd' below
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Configure Git Identity
        run: |
          git config --global user.name "therockbot"
          git config --global user.email "therockbot@amd.com"

      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ inputs.python_version }}

      # TODO(amd-justchen): share with build_windows_packages.yml. Include in VM image? Dockerfile?
      - name: Install requirements
        run: |
          # ninja pinned due to a bug in the 1.13.0 release:
          # https://github.com/ninja-build/ninja/issues/2616
          choco install --no-progress -y ninja --version 1.12.1
          choco install --no-progress -y awscli
          echo "$PATH;C:\Program Files\Amazon\AWSCLIV2" >> $GITHUB_PATH

      # After other installs, so MSVC get priority in the PATH.
      - name: Configure MSVC
        uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # v1.13.0

      - name: Checkout PyTorch source repos (main branch)
        run: |
          git config --global core.longpaths true
          python ./external-builds/pytorch/pytorch_torch_repo.py checkout \
            --repo ${{ env.CHECKOUT_ROOT }}/torch \
            --repo-hashtag main
          python ./external-builds/pytorch/pytorch_audio_repo.py checkout \
            --repo ${{ env.CHECKOUT_ROOT }}/audio \
            --repo-hashtag main
          python ./external-builds/pytorch/pytorch_vision_repo.py checkout \
            --repo ${{ env.CHECKOUT_ROOT }}/vision \
            --repo-hashtag main

      - name: Determine optional arguments passed to `build_prod_wheels.py`
        if: ${{ inputs.rocm_version }}
        run: |
          pip install packaging
          python build_tools/github_actions/determine_version.py \
            --rocm-version ${{ inputs.rocm_version }}

      - name: Build PyTorch Wheels
        id: build-pytorch-wheels
        # Using 'cmd' here is load bearing! There are configuration issues when
        # run under 'bash': https://github.com/ROCm/TheRock/issues/827#issuecomment-3025858800
        shell: cmd
        run: |
          echo "Building PyTorch wheels for ${{ inputs.amdgpu_family }}"
          python ./external-builds/pytorch/build_prod_wheels.py ^
            build ^
            --install-rocm ^
            --index-url "${{ inputs.cloudfront_url }}/${{ inputs.amdgpu_family }}/" ^
            --pytorch-dir ${{ env.CHECKOUT_ROOT }}/torch ^
            --pytorch-audio-dir ${{ env.CHECKOUT_ROOT }}/audio ^
            --pytorch-vision-dir ${{ env.CHECKOUT_ROOT }}/vision ^
            --clean ^
            --output-dir ${{ env.PACKAGE_DIST_DIR }} ^
            ${{ env.optional_build_prod_arguments }}
          python ./build_tools/github_actions/write_torch_versions.py --dist-dir ${{ env.PACKAGE_DIST_DIR }}

      - name: Configure AWS Credentials
        if: always()
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4.3.1
        with:
          aws-region: us-east-2
          role-to-assume: arn:aws:iam::692859939525:role/therock-${{ inputs.release_type }}-releases

      # TODO(#827, #910): enable this once we build torch audio and vision on Windows
      # - name: Sanity Check Wheel
      #   shell: cmd
      #   run: |
      #     python external-builds/pytorch/sanity_check_wheel.py ${{ env.PACKAGE_DIST_DIR }}

      - name: Upload wheels to S3
        if: ${{ github.repository_owner == 'ROCm' }}
        # Using 'cmd' here since PACKAGE_DIST_DIR uses \ in paths instead of /
        shell: cmd
        run: |
          aws s3 cp ${{ env.PACKAGE_DIST_DIR }}/ ^
            s3://${{ env.S3_BUCKET_PY }}/${{ inputs.s3_subdir }}/${{ inputs.amdgpu_family }}/ ^
            --recursive --exclude "*" --include "*.whl"

      - name: (Re-)Generate Python package release index
        if: ${{ github.repository_owner == 'ROCm' }}
        run: |
          pip install boto3 packaging
          python ./build_tools/third_party/s3_management/manage.py ${{ inputs.s3_subdir }}/${{ inputs.amdgpu_family }}

  generate_target_to_run:
    name: Generate target_to_run
    runs-on: ubuntu-24.04
    outputs:
      test_runs_on: ${{ steps.configure.outputs.test-runs-on }}
    steps:
      - name: Checking out repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Generating target to run
        id: configure
        env:
          TARGET: ${{ inputs.amdgpu_family }}
          PLATFORM: "windows"
        run: python ./build_tools/github_actions/configure_target_run.py

  test_pytorch_wheels:
    name: Test | ${{ inputs.amdgpu_family }} | ${{ needs.generate_target_to_run.outputs.test_runs_on }}
    if: ${{ needs.generate_target_to_run.outputs.test_runs_on != '' }}
    needs: [build_pytorch_wheels, generate_target_to_run]
    uses: ./.github/workflows/test_pytorch_wheels.yml
    with:
      amdgpu_family: ${{ inputs.amdgpu_family }}
      test_runs_on: ${{ needs.generate_target_to_run.outputs.test_runs_on }}
      cloudfront_url: ${{ inputs.cloudfront_url }}
      python_version: ${{ inputs.python_version }}
      torch_version: ${{ needs.build_pytorch_wheels.outputs.torch_version }}
