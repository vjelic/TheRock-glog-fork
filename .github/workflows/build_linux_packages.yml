name: Build Linux Packages

on:
  workflow_dispatch:
    inputs:
      package_version:
        type: string
        default: ADHOCBUILD
      amdgpu_families:
        type: string
      expect_failure:
        type: boolean
        default: false
      extra_cmake_options:
        type: string

  workflow_call:
    inputs:
      package_version:
        type: string
        default: ADHOCBUILD
      amdgpu_families:
        type: string
      expect_failure:
        type: boolean
      extra_cmake_options:
        type: string

# See the details regarding permissions from the link:
# https://github.com/aws-actions/configure-aws-credentials?tab=readme-ov-file#oidc
permissions:
  contents: read

jobs:
  build_linux_packages:
    name: Build Linux Packages (xfail ${{ inputs.expect_failure }})
    runs-on: azure-linux-scale-rocm
    continue-on-error: ${{ inputs.expect_failure }}
    permissions:
      id-token: write
    container:
      image: ghcr.io/rocm/therock_build_manylinux_x86_64@sha256:543ba2609de3571d2c64f3872e5f1af42fdfa90d074a7baccb1db120c9514be2
    strategy:
      fail-fast: true
    env:
      CACHE_DIR: ${{ github.workspace }}/.container-cache
      # The ccache.conf will be written by setup_ccache.py before this gets used.
      CCACHE_CONFIGPATH: ${{ github.workspace }}/.ccache/ccache.conf
      CCACHE_SECONDARY_STORAGE: http://bazelremote-svc.bazelremote-ns.svc.cluster.local:8080|layout=bazel|connect-timeout=50
      CCACHE_LOGFILE: ${{ github.workspace }}/build/logs/ccache.log
      CCACHE_STATSLOG: ${{ github.workspace }}/build/logs/ccache_stats.log
      CCACHE_MAXSIZE: "5G"
      AMDGPU_FAMILIES: ${{ inputs.amdgpu_families }}
      TEATIME_FORCE_INTERACTIVE: 0

    steps:
      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # TODO: We shouldn't be using a cache on actual release branches, but it
      # really helps for iteration time.
      - name: Runner Health Settings
        run: |
          echo "CCACHE_SECONDARY_STORAGE: $CCACHE_SECONDARY_STORAGE"
          mkdir -p "$(dirname $CCACHE_LOGFILE)"
          ./build_tools/setup_ccache.py \
            --dir "$(dirname $CCACHE_CONFIGPATH)" \
            --local-path "$CACHE_DIR/ccache"
          df -h
          echo "ccache version: $(ccache --version)"
          echo "ccache config:"
          echo "---"
          cat "$CCACHE_CONFIGPATH"
          echo "---"
          ccache -z
          ccache -s -v
          echo cmake --version
          echo "Installed Python versions:"
          ls -d /opt/python
          echo "python: $(which python), python3: $(which python3)"
          echo "Git version: $(git --version)"
          git config --global --add safe.directory $PWD
          git config fetch.parallel 10

      - name: Fetch sources
        run: |
          ./build_tools/fetch_sources.py --jobs 12

      - name: Install python deps
        run: |
          pip install -r requirements.txt

      - name: Configure Projects
        env:
          amdgpu_families: ${{ inputs.amdgpu_families }}
          package_version: ${{ inputs.package_version }}
          extra_cmake_options: ${{ inputs.extra_cmake_options }}
          BUILD_DIR: build
        run: |
          python3 build_tools/github_actions/build_configure.py

      - name: Build therock-dist
        run: cmake --build build --target therock-dist

      - name: Build therock-archives
        run: cmake --build build --target therock-archives

      - name: Test Packaging
        if: ${{ github.event.repository.name == 'TheRock' }}
        run: |
          ctest --test-dir build --output-on-failure

      - name: Report
        if: ${{ !cancelled() }}
        run: |
          echo "Full SDK du:"
          echo "------------"
          du -h -d 1 build/dist/rocm
          echo "Artifact Archives:"
          echo "------------------"
          ls -lh build/artifacts/*.tar.xz
          echo "Artifacts:"
          echo "----------"
          du -h -d 1 build/artifacts
          echo "CCache Stats:"
          echo "-------------"
          ccache -s -v
          tail -v -n +1 .ccache/compiler_check_cache/* > build/logs/ccache_compiler_check_cache.log

      - name: Configure AWS Credentials
        if: always()
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
        with:
          aws-region: us-east-2
          role-to-assume: arn:aws:iam::692859939525:role/therock-artifacts

      - name: Create Logs index Files
        if: always()
        run: |
          python3 build_tools/github_actions/create_log_index.py \
            --build-dir=build \
            --amdgpu-family=${{ inputs.amdgpu_families }}

      - name: Upload artifacts
        if: always()
        run: |
          python build_tools/github_actions/upload_build_artifacts.py \
            --run-id ${{ github.run_id }} \
            --amdgpu-family ${{ inputs.amdgpu_families }} \
            --build-dir build

      - name: Upload Logs
        if: always()
        run: |
          python3 build_tools/github_actions/upload_build_logs_to_s3.py \
            --build-dir=build \
            --run-id ${{ github.run_id }} \
            --amdgpu-family ${{ inputs.amdgpu_families }}

      - name: Add Links to Job Summary
        if: always()
        run: |
          python build_tools/github_actions/upload_build_summary.py \
            --run-id ${{ github.run_id }} \
            --amdgpu-family ${{ inputs.amdgpu_families }} \
            --build-dir build

      - name: Upload job metrics to Redshift database
        if: github.repository == 'ROCm/TheRock' && always()
        env:
          RUN_ID: ${{ github.run_id }}
          ATTEMPT: ${{ github.run_attempt }}
        run: |
          # Fetch job summary and store it
          JOB_SUMMARY=$(python3 build_tools/github_actions/fetch_job_status.py)
          # Populate Redshift Database tables
          python3 build_tools/github_actions/populate_redshift_db.py \
            --api-output "$JOB_SUMMARY" \
            --redshift-cluster-endpoint "${{ secrets.THEROCK_REDSHIFT_CLUSTER_ENDPOINT }}" \
            --redshift-username  "${{ secrets.THEROCK_REDSHIFT_CLUSTER_USERNAME }}"\
            --dbname "${{ secrets.THEROCK_REDSHIFT_CLUSTER_DBNAME }}" \
            --redshift-password "${{ secrets.THEROCK_REDSHIFT_CLUSTER_PASSWORD }}" \
            --redshift-port "${{ secrets.THEROCK_REDSHIFT_CLUSTER_ACCESS_PORT }}" \
            --run-id ${{ github.run_number }}
