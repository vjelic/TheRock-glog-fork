name: Build Portable Linux PyTorch Wheels

on:
  workflow_call:
    inputs:
      amdgpu_family:
        required: true
        type: string
      python_version:
        required: true
        type: string
      release_type:
        description: The type of release to build ("nightly", or "dev")
        required: true
        type: string
      s3_subdir:
        description: S3 subdirectory, not including the GPU-family
        required: true
        type: string
      cloudfront_url:
        description: CloudFront URL pointing to Python index
        required: true
        type: string
      rocm_version:
        description: ROCm version to pip install
        type: string
      pytorch_version:
        description: Pytorch version to checkout. ("nightly", or "release/2.7")
        required: true
        type: string
      pytorch_patchset:
        description: Patch directory name from where to apply existing patches.
        required: true
        type: string
  workflow_dispatch:
    inputs:
      amdgpu_family:
        type: choice
        options:
          - gfx110X-dgpu
          - gfx1151
          - gfx120X-all
          - gfx94X-dcgpu
          - gfx950-dcgpu
        default: gfx94X-dcgpu
      python_version:
        required: true
        type: string
        default: "3.12"
      release_type:
        description: The type of release to build ("nightly", or "dev")
        type: string
        default: "dev"
      s3_subdir:
        description: S3 subdirectory, not including the GPU-family
        type: string
        default: "v2"
      cloudfront_url:
        description: CloudFront base URL pointing to Python index
        type: string
        default: "https://d25kgig7rdsyks.cloudfront.net/v2"
      rocm_version:
        description: ROCm version to pip install
        type: string
      pytorch_version:
        description: Pytorch version to checkout. ("nightly", or "release/2.7")
        required: true
        type: string
        default: "release/2.7"
      pytorch_patchset:
        description: Patch directory name from where to apply existing patches.
        required: true
        type: string
        default: "rocm_2.7"

permissions:
  id-token: write
  contents: read

jobs:
  build_pytorch_wheels:
    name: Build Linux PyTorch Wheels | ${{ inputs.amdgpu_family }} | Python ${{ inputs.python_version }}
    runs-on: ${{ github.repository_owner == 'ROCm' && 'azure-linux-scale-rocm' || 'ubuntu-24.04' }}
    container:
      image: ghcr.io/rocm/therock_build_manylinux_x86_64@sha256:543ba2609de3571d2c64f3872e5f1af42fdfa90d074a7baccb1db120c9514be2
    env:
      OUTPUT_DIR: ${{ github.workspace }}/output
      PACKAGE_DIST_DIR: ${{ github.workspace }}/output/packages/dist
      S3_BUCKET_PY: "therock-${{ inputs.release_type }}-python"
      optional_build_prod_arguments: ""
    outputs:
      torch_version: ${{ steps.build-pytorch-wheels.outputs.torch_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Configure Git Identity
        run: |
          git config --global user.name "therockbot"
          git config --global user.email "therockbot@amd.com"

      - name: Select Python version
        run: |
          python build_tools/github_actions/python_to_cp_version.py \
            --python-version ${{ inputs.python_version }}

      - name: Add selected Python version to PATH
        run: |
          python_dir="/opt/python/${{ env.cp_version }}"
          if ! [ -x "${python_dir}/bin/python" ]; then
            echo "ERROR: Could not find python: ${python_dir}"
            exit 1
          fi
          echo "${python_dir}/bin" >> "$GITHUB_PATH"

      # Github workflows do not have if/else and therefore we define two jobs with different if clauses.
      # First the if branch to checkout nightly version of code for the build.
      - name: Checkout PyTorch Source Repos from nightly branch
        # Checkout default upstream PyTorch/PyTorch branch.
        if: ${{ inputs.pytorch_version == 'nightly' }}
        run: |
          ./external-builds/pytorch/pytorch_torch_repo.py checkout --repo-hashtag nightly
          ./external-builds/pytorch/pytorch_audio_repo.py checkout --repo-hashtag nightly
          ./external-builds/pytorch/pytorch_vision_repo.py checkout --repo-hashtag nightly
          ./external-builds/pytorch/pytorch_triton_repo.py checkout --patch --patchset nightly

      # Then the else branch to checkout release version of source code instead.
      - name: Checkout PyTorch Source Repos from stable branch
        if: ${{ inputs.pytorch_version != 'nightly' }}
        run: |
          ./external-builds/pytorch/pytorch_torch_repo.py checkout --gitrepo-origin https://github.com/ROCm/pytorch.git --repo-hashtag ${{ inputs.pytorch_version }} --patchset ${{ inputs.pytorch_patchset }}
          ./external-builds/pytorch/pytorch_audio_repo.py checkout --require-related-commit
          ./external-builds/pytorch/pytorch_vision_repo.py checkout --require-related-commit
          ./external-builds/pytorch/pytorch_triton_repo.py checkout

      - name: Create pip cache directory
        run: mkdir -p /tmp/pipcache

      - name: Determine optional arguments passed to `build_prod_wheels.py`
        if: ${{ inputs.rocm_version }}
        run: |
          pip install packaging
          python build_tools/github_actions/determine_version.py \
            --rocm-version ${{ inputs.rocm_version }}

      - name: Build PyTorch Wheels
        id: build-pytorch-wheels
        run: |
          echo "Building PyTorch wheels for ${{ inputs.amdgpu_family }}"
          ./external-builds/pytorch/build_prod_wheels.py \
            build \
            --install-rocm \
            --pip-cache-dir /tmp/pipcache \
            --index-url "${{ inputs.cloudfront_url }}/${{ inputs.amdgpu_family }}/" \
            --clean \
            --output-dir ${{ env.PACKAGE_DIST_DIR }} ${{ env.optional_build_prod_arguments }}
          python ./build_tools/github_actions/write_torch_versions.py --dist-dir ${{ env.PACKAGE_DIST_DIR }}

      - name: Configure AWS Credentials
        if: always()
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4.3.1
        with:
          aws-region: us-east-2
          role-to-assume: arn:aws:iam::692859939525:role/therock-${{ inputs.release_type }}-releases

      - name: Sanity Check Wheel
        run: |
          python external-builds/pytorch/sanity_check_wheel.py ${{ env.PACKAGE_DIST_DIR }}/

      - name: Upload wheels to S3
        if: ${{ github.repository_owner == 'ROCm' }}
        run: |
          aws s3 cp ${{ env.PACKAGE_DIST_DIR }}/ s3://${{ env.S3_BUCKET_PY }}/${{ inputs.s3_subdir }}/${{ inputs.amdgpu_family }}/ \
            --recursive --exclude "*" --include "*.whl"

      - name: (Re-)Generate Python package release index
        if: ${{ github.repository_owner == 'ROCm' }}
        run: |
          pip install boto3 packaging
          python ./build_tools/third_party/s3_management/manage.py ${{ inputs.s3_subdir }}/${{ inputs.amdgpu_family }}

  generate_target_to_run:
    name: Generate target_to_run
    runs-on: ubuntu-24.04
    outputs:
      test_runs_on: ${{ steps.configure.outputs.test-runs-on }}
    steps:
      - name: Checking out repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Generating target to run
        id: configure
        env:
          TARGET: ${{ inputs.amdgpu_family }}
          PLATFORM: "linux"
        run: python ./build_tools/github_actions/configure_target_run.py

  test_pytorch_wheels:
    name: Test | ${{ inputs.amdgpu_family }} | ${{ needs.generate_target_to_run.outputs.test_runs_on }}
    if: ${{ needs.generate_target_to_run.outputs.test_runs_on != '' }}
    needs: [build_pytorch_wheels, generate_target_to_run]
    uses: ./.github/workflows/test_pytorch_wheels.yml
    with:
      amdgpu_family: ${{ inputs.amdgpu_family }}
      test_runs_on: ${{ needs.generate_target_to_run.outputs.test_runs_on }}
      cloudfront_url: ${{ inputs.cloudfront_url }}
      python_version: ${{ inputs.python_version }}
      torch_version: ${{ needs.build_pytorch_wheels.outputs.torch_version }}
      pytorch_version: ${{ inputs.pytorch_version }}
