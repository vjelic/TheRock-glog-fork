name: Build Linux PyTorch Wheels

on:
  workflow_call:
    inputs:
      AMDGPU_FAMILIES:
        required: true
        type: string
      python_version:
        required: true
        type: string
      s3_bucket:
        required: true
        type: string
      s3_subdir:
        required: true
        type: string
      s3_cloudfront:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      AMDGPU_FAMILIES:
        required: true
        type: string
      python_version:
        required: true
        type: string
      s3_bucket:
        required: true
        type: string
      s3_subdir:
        required: true
        type: string
      s3_cloudfront:
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  set-runner:
    runs-on: ubuntu-24.04
    outputs:
      runner_label: ${{ steps.set.outputs.runner_label }}
    steps:
      - id: set
        run: |
          case "${{ inputs.AMDGPU_FAMILIES }}" in
            gfx94X-dcgpu)
              echo "runner_label=linux-mi300-1gpu-ossci-rocm" >> "$GITHUB_OUTPUT"
              ;;
            gfx120X-all)
              echo "runner_label=linux-rx9070-gpu-rocm" >> "$GITHUB_OUTPUT"
              ;;
            gfx110X-dgpu)
              echo "runner_label=linux-rx7900-gpu-rocm" >> "$GITHUB_OUTPUT"
              ;;
            *)
              echo "runner_label=ubuntu-24.04" >> "$GITHUB_OUTPUT"
              ;;
          esac

  build_pytorch_wheels:
    needs: set-runner
    runs-on: ${{ needs.set-runner.outputs.runner_label }}
    name: Build Linux PyTorch Wheels | ${{ inputs.AMDGPU_FAMILIES }} | Python ${{ inputs.python_version }}
    env:
      OUTPUT_DIR: ${{ github.workspace }}/output
      PACKAGE_DIST_DIR: ${{ github.workspace }}/output/packages/dist
      S3_BUCKET_PY: ${{ inputs.s3_bucket }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Configure Git Identity
        run: |
          git config --global user.name "therockbot"
          git config --global user.email "therockbot@amd.com"

      - name: Run Docker container with ROCm access
        run: |
          docker run --rm \
            --device=/dev/kfd \
            --device=/dev/dri \
            --group-add video \
            --group-add render \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            -e PYTORCH_TEST_WITH_ROCM=1 \
            ghcr.io/rocm/therock_build_manylinux_x86_64@sha256:044b113562629f4bd2ec5d2e64b32eee11562d48fb1a75d7493daec9dd8d8292 \
            bash -c "
              python_dir=/opt/python/${{ inputs.python_version }} && \
              if ! [ -x \$python_dir/bin/python ]; then
                echo 'ERROR: Python not found at \$python_dir' && exit 1
              fi && \
              export PATH=\$python_dir/bin:\$PATH && \
              ./external-builds/pytorch/pytorch_torch_repo.py checkout && \
              ./external-builds/pytorch/pytorch_audio_repo.py checkout && \
              ./external-builds/pytorch/pytorch_vision_repo.py checkout && \
              mkdir -p /tmp/pipcache && \
              ./external-builds/pytorch/build_prod_wheels.py \
                --pip-cache-dir /tmp/pipcache \
                --index-url https://${{ inputs.s3_cloudfront }}/${{ inputs.s3_subdir }}/${{ inputs.AMDGPU_FAMILIES }}/ \
                build \
                --install-rocm \
                --clean \
                --output-dir output/packages/dist && \
              python -m pip install output/packages/dist/torch-*.whl && \
              echo 'Running rocm-smi...' && rocm-smi && \
              cd external-builds/pytorch/pytorch && \
              python -m pip install pytest pytest-xdist && \
              pytest test/test_nn.py -v && \
              pytest test/test_torch.py -v && \
              pytest test/test_cuda.py -v && \
              pytest test/test_ops.py -v && \
              pytest test/test_unary_ufuncs.py -v && \
              pytest test/test_binary_ufuncs.py -v && \
              pytest test/test_autograd.py -v && \
              pytest torch/_inductor/test_torchinductor.py -v
            "

      - name: Configure AWS Credentials
        if: always()
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
        with:
          aws-region: us-east-2
          role-to-assume: arn:aws:iam::692859939525:role/therock-nightly-releases

      - name: Sanity Check Wheel
        run: |
          python external-builds/pytorch/sanity_check_wheel.py ${{ env.PACKAGE_DIST_DIR }}/

      - name: Upload wheels to S3
        if: ${{ github.repository_owner == 'ROCm' }}
        run: |
          aws s3 cp ${{ env.PACKAGE_DIST_DIR }}/ s3://${{ env.S3_BUCKET_PY }}/${{ inputs.s3_subdir }}/${{ inputs.AMDGPU_FAMILIES }}/ \
            --recursive --exclude "*" --include "*.whl"

      - name: (Re-)Generate Python package release index
        if: ${{ github.repository_owner == 'ROCm' }}
        run: |
          pip install boto3 packaging
          python ./build_tools/third_party/s3_management/manage.py ${{ inputs.s3_subdir }}/${{ inputs.AMDGPU_FAMILIES }}
