name: Publish PyTorch Dev Dockers
on:
  workflow_dispatch:
    inputs:
      families:
        description: "Please enter a comma separated list of AMD GPU family (ex: gfx94X, gfx103x). Please note that docker builds only work for prebuilds available here https://github.com/ROCm/TheRock/releases/tag/nightly-tarball"
        type: string
  schedule:
    - cron: "0 2 * * *" # Runs nightly at 2 AM UTC

jobs:
  setup_metadata:
    runs-on: ubuntu-24.04
    outputs:
      package_targets: ${{ steps.configure.outputs.package_targets }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Generating package target matrix
        id: configure
        env:
          AMDGPU_FAMILIES: ${{ inputs.families }}
          PYTORCH_DEV_DOCKER: "true"
          THEROCK_PACKAGE_PLATFORM: "linux"
        run: python ./build_tools/github_actions/fetch_package_targets.py

  set-runner:
    runs-on: ubuntu-24.04
    needs: setup_metadata
    outputs:
      targets: ${{ steps.set.outputs.filtered_targets }}
    steps:
    - name: Set filtered targets
      id: set
      run: |
        python3 <<EOF
        import json
        import os

        raw_targets = json.loads(os.environ['PACKAGE_TARGETS'])
        filtered = []

        for entry in raw_targets:
            family = entry["amdgpu_family"]
            if family in ("gfx942", "gfx1201", "gfx1100"):
                entry["runner"] = {
                    "gfx942": "linux-mi300-1gpu-ossci-rocm",
                    "gfx1201": "linux-rx9070-gpu-rocm",
                    "gfx1100": "linux-rx7900-gpu-rocm"
                }[family]
                filtered.append(entry)
            else:
                print(f"Skipping {family}, no runner assigned.")

        with open(os.environ["GITHUB_OUTPUT"], "a") as f:
            f.write(f"filtered_targets={json.dumps(filtered)}\n")
        EOF
      env:
        PACKAGE_TARGETS: ${{ needs.setup_metadata.outputs.package_targets }}

  build-and-push-image:
    needs: [setup_metadata, set-runner]  # ADD set-runner as dependency
    strategy:
      fail-fast: false
      matrix:
        targets: ${{ fromJSON(needs.set-runner.outputs.targets) }}

    name: ${{ matrix.targets.amdgpu_family }}::Build
    runs-on: ${{ matrix.targets.runner }}
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ROCm/therock_pytorch_dev_ubuntu_24_04_${{ matrix.targets.amdgpu_family }}
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      actions: write # Added permission to trigger workflows
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Runner Health Settings
        run: |
          df -h
          echo "python: $(which python), python3: $(which python3)"
          echo "Git version: $(git --version)"
          git config --global --add safe.directory $PWD
          git config fetch.parallel 10

      - name: Fetch sources
        run: |
          python3 ./build_tools/fetch_sources.py --jobs 10

      - name: Log in to the Container registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set nightly version
        run: |
          BASE_VERSION=$(jq -r '.["rocm-version"]' version.json)
          echo "VERSION=${BASE_VERSION}rc$(date +'%Y%m%d')" >> "$GITHUB_ENV"

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.9
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.

      - name: Build and push Docker image
        id: build_push
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          context: .
          file: dockerfiles/pytorch-dev/pytorch_dev_ubuntu_24.04.Dockerfile
          build-args: |
            AMDGPU_TARGETS=${{ matrix.targets.amdgpu_family }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.title="PyTorch ROCm Dev Image"
            org.opencontainers.image.description="Nightly ROCm PyTorch Dev Docker for target ${{ matrix.targets.amdgpu_family }}"
            org.opencontainers.image.version=${{ env.VERSION }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Log digest
        run: |
          echo "Built image with digest: ${{ steps.build_push.outputs.digest }}"

      - name: Trigger verification workflow
        uses: benc-uk/workflow-dispatch@e2e5e9a103e331dad343f381a29e654aea3cf8fc #1.2.4
        with:
          workflow: test_pytorch_docker.yml
          inputs: |
            {
              "amdgpu_target": "${{ matrix.targets.amdgpu_family }}",
              "image_digest": "${{ steps.build_push.outputs.digest }}",
              "runner_type": "${{ matrix.targets.runner }}",
              "version": "${{ env.VERSION }}"
            }
