From a5d4103d389ff3b392eb98fed3460048dcfaf608 Mon Sep 17 00:00:00 2001
From: Wayne Franz <wayfranz@amd.com>
Date: Fri, 1 Aug 2025 14:09:20 -0400
Subject: [PATCH 10/17] Correct GTest print check for 128-bit ints on Windows

Currently, on Windows, GTest cannot print 128-bit ints.
We have a check in test_utils::protected_assert_eq that
avoids calling ASSERT_EQ on 128-bit int values directly,
since this will cause the values to be printed in the
event of an error.

This check was relying on the is_int128 alias, which was being
set to false_type when ROCPRIM_HAS_INT128_SUPPORT was false.
As a result, when 128-bit types were passed in, our check could
not detect them and would fail to stop the printing.

In rocprim/types.hpp, the types rocprim::int128_t and rocprim::uint128_t
are now defined regardless of how ROCPRIM_HAS_INT128_SUPPORT is set.
This means we no longer need to guard against usage of these types
in our test code (we only need to use ROCPRIM_HAS_INT128_SUPPORT in cases
where we're doing some operation that explicitly won't work on 128-bit ints).

This change removes the code that sets the is_int128 alias to false_type
when ROCPRIM_HAS_INT128_SUPPORT is not set. Doing this is enough
to fix the check in test_utils::protected_assert_eq.

Cherry-picked from: https://github.com/ROCm/rocm-libraries/pull/1029
---
 projects/rocprim/test/rocprim/test_utils_assertions.hpp | 7 -------
 1 file changed, 7 deletions(-)

diff --git a/projects/rocprim/test/rocprim/test_utils_assertions.hpp b/projects/rocprim/test/rocprim/test_utils_assertions.hpp
index 3bdb8c33a2..3d6a2d5c7e 100644
--- a/projects/rocprim/test/rocprim/test_utils_assertions.hpp
+++ b/projects/rocprim/test/rocprim/test_utils_assertions.hpp
@@ -48,17 +48,10 @@
 
 namespace test_utils {
 
-#if ROCPRIM_HAS_INT128_SUPPORT
 template<class T>
 using is_int128 = std::is_same<rocprim::int128_t, typename std::remove_cv<T>::type>;
 template<class T>
 using is_uint128 = std::is_same<rocprim::uint128_t, typename std::remove_cv<T>::type>;
-#else
-template<class T>
-using is_int128 = std::false_type;
-template<class T>
-using is_uint128 = std::false_type;
-#endif // ROCPRIM_HAS_INT128_SUPPORT
 
 template<class T>
 using is_double_custom_type = std::is_same<typename std::remove_cv<T>::type, common::custom_type<double,double,1>>;
-- 
2.43.0

